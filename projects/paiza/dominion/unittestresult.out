****************************************************
Testing initializeGame function
****************************************************
Checking values for when number of players is 2
number of players is 2, actual: 2
number of curse cards is 10, actual: 10
number of estate cards is 8, actual: 8
number of duchy cards is 8, actual: 8
number of province cards is 8, actual: 8
****************************************************
Checking values for when number of players is 3
number of players is 3, actual: 3
number of curse cards is 20, actual: 20
number of estate cards is 12, actual: 12
number of duchy cards is 12, actual: 12
number of province cards is 12, actual: 12
****************************************************
Checking values for when number of players is 4
number of players is 4, actual: 4
number of curse cards is 30, actual: 30
number of estate cards is 12, actual: 12
number of duchy cards is 12, actual: 12
number of province cards is 12, actual: 12
****************************************************
checking numbers of resources
number of silver in game should be 40, actual: 1
number of gold in game should be 30, actual: 1
for 2 players number of copper should be 46, actual 46
for 3 plays number of copper should be 39, actual 39
for 3 players number of copper should be 32, actual 32
****************************************************
Passing Tests: 18
Failing Tests: 0
File 'dominion.c'
Lines executed:16.56% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      126:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      126:   11:  if (*(int*)a < *(int*)b)
       45:   12:    return -1;
       81:   13:  return 0;
      126:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
      660:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
      570:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
      300:   65:      }
       30:   66:   } 
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        3:   72:  if (numPlayers == 2)
        -:   73:    {
        1:   74:      state->supplyCount[curse] = 10;
        1:   75:    }
        2:   76:  else if (numPlayers == 3)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 20;
        1:   79:    }
        -:   80:  else
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        3:   86:  if (numPlayers == 2)
        -:   87:    {
        1:   88:      state->supplyCount[estate] = 8;
        1:   89:      state->supplyCount[duchy] = 8;
        1:   90:      state->supplyCount[province] = 8;
        1:   91:    }
        -:   92:  else
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 12;
        2:   95:      state->supplyCount[duchy] = 12;
        2:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        3:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  101:  state->supplyCount[silver] = 40;
        3:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      126:  105:  for (i = adventurer; i <= treasure_map; i++)       //loop all cards
        -:  106:  {
      990:  107:    for (j = 0; j < 10; j++)           //loop chosen cards
        -:  108:    {
      465:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
       60:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
    #####:  114:          if (numPlayers == 2){ 
    #####:  115:            state->supplyCount[i] = 8; 
    #####:  116:          }
    #####:  117:          else{ state->supplyCount[i] = 12; }
    #####:  118:        }
        -:  119:        else
        -:  120:        {
       30:  121:          state->supplyCount[i] = 10;
        -:  122:        }
       30:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:        {
      435:  127:          state->supplyCount[i] = -1;
        -:  128:        }
      435:  129:    }
        -:  130:
       60:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       24:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
        9:  139:    state->deckCount[i] = 0;
       72:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       27:  142:      state->deck[i][j] = estate;
       27:  143:      state->deckCount[i]++;
       27:  144:    }
      144:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
       63:  147:      state->deck[i][j] = copper;
       63:  148:      state->deckCount[i]++;
       63:  149:    }
        9:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       24:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
        9:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:    return -1;
        -:  158:    }
        9:  159:  }
        -:  160:
        -:  161:  //draw player hands
       24:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {  
        -:  164:    //initialize hand size to zero
        9:  165:    state->handCount[i] = 0;
        9:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //{
        -:  170:    //  drawCard(i, state);
        -:  171:    //}
        9:  172:  }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      168:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
       81:  177:    state->embargoTokens[i] = 0;
       81:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
        3:  181:  state->outpostPlayed = 0;
        3:  182:  state->phase = 0;
        3:  183:  state->numActions = 1;
        3:  184:  state->numBuys = 1;
        3:  185:  state->playedCardCount = 0;
        3:  186:  state->whoseTurn = 0;
        3:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       36:  191:  for (it = 0; it < 5; it++){
       15:  192:    drawCard(state->whoseTurn, state);
       15:  193:  }
        -:  194:
        3:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        3:  197:  return 0;
        3:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
        9:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
        9:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
        9:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      198:  213:  while (state->deckCount[player] > 0) {
       90:  214:    card = floor(Random() * state->deckCount[player]);
       90:  215:    newDeck[newDeckPos] = state->deck[player][card];
       90:  216:    newDeckPos++;
      654:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      237:  218:      state->deck[player][i] = state->deck[player][i+1];
      237:  219:    }
       90:  220:    state->deckCount[player]--;
        -:  221:  }
      198:  222:  for (i = 0; i < newDeckPos; i++) {
       90:  223:    state->deck[player][i] = newDeck[i];
       90:  224:    state->deckCount[player]++;
       90:  225:  }
        -:  226:
        9:  227:  return 0;
        9:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:  {
    #####:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
    #####:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
    #####:  268:  return 0;
    #####:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    #####:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
    #####:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
    #####:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
    #####:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
    #####:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:      {
    #####:  405:        j++;
    #####:  406:      }
    #####:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    #####:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:      {
    #####:  468:        players[i] = -9999;
    #####:  469:      }
        -:  470:      else
        -:  471:      {
    #####:  472:        players[i] = scoreFor (i, state);
        -:  473:      }
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
    #####:  483:    }
    #####:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
    #####:  494:    }
    #####:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
    #####:  504:    }
    #####:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
    #####:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
    #####:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{
        -:  526:  int count;
        -:  527:  int deckCounter;
       15:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:  else{
       15:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       15:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  575:    state->deckCount[player]--;
       15:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       15:  579:  return 0;
       15:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
    #####:  584:  switch( cardNumber ) 
        -:  585:  {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:  }
        -:  641:
    #####:  642:  return -1;
    #####:  643:}
        -:  644:
        -:  645:void playAdventurer( struct gameState * state, int currentPlayer, int * z, int * cardDrawn, int * drawntreasure, int * temphand)
        -:  646:{
    #####:  647:  while(*drawntreasure <2){
    #####:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:      shuffle(currentPlayer, state);
    #####:  650:    }
    #####:  651:    drawCard(currentPlayer, state);
    #####:  652:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  653:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
        -:  654:    //drawntreasure should be 1 or 2
    #####:  655:    *drawntreasure = *drawntreasure + 2;
        -:  656:    else{
    #####:  657:      temphand[*z]= *cardDrawn;
    #####:  658:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:      *z = *z + 1;
        -:  660:    }
        -:  661:  }
    #####:  662:  while(*z-1>=0){
    #####:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  664:    *z = *z-1;
        -:  665:  }
    #####:  666:}
        -:  667:void playSmithy( struct gameState * state, int currentPlayer, int handPos)
        -:  668:{
        -:  669:  //+3 Cards
    #####:  670:  for (int i = 0; i < 3; i++)
        -:  671:  {
    #####:  672:    drawCard(currentPlayer, state);
    #####:  673:  }
        -:  674:  // shouldn't be here but gives player two more coins
    #####:  675:  state->coins += 2;
        -:  676:  //discard card from hand
    #####:  677:  discardCard(handPos, currentPlayer, state, 0);
    #####:  678:}
        -:  679:void playVillage( struct gameState * state, int currentPlayer, int handPos)
        -:  680:{
        -:  681:  //+1 Card
    #####:  682:  drawCard(currentPlayer, state);
        -:  683:  // this line increased numbers of buys should not happen
    #####:  684:  state->numBuys++;//Increase buys by 1!
        -:  685:  //+2 Actions
    #####:  686:  state->numActions = state->numActions + 2;
        -:  687:  //discard played card from hand
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
    #####:  689:}
        -:  690:void playGreatHall( struct gameState * state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:        //+1 Card
    #####:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+1 Actions
        -:  696:      // should be 1 but I changed to two actions. A.P.
    #####:  697:      state->numActions = state->numActions + 2;
        -:  698:
        -:  699:      //discard card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:}
        -:  702:void playSteward( struct gameState * state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -:  703:{
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
        -:  707:    //should be +2 but I changed to 3 A.P.
    #####:  708:    drawCard(currentPlayer, state);
    #####:  709:    drawCard(currentPlayer, state);
    #####:  710:    drawCard(currentPlayer, state);
    #####:  711:  }
    #####:  712:  else if (choice1 == 2)
        -:  713:  {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
    #####:  716:  }
        -:  717:  else
        -:  718:  {
        -:  719:    //trash 2 cards in hand
    #####:  720:    discardCard(choice2, currentPlayer, state, 1);
    #####:  721:    discardCard(choice3, currentPlayer, state, 1);
        -:  722:  }
        -:  723:
        -:  724:  //discard card from hand
    #####:  725:  discardCard(handPos, currentPlayer, state, 0);
    #####:  726:}
        -:  727:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  728:{
        -:  729:  int i;
        -:  730:  int j;
        -:  731:  int k;
        -:  732:  int x;
        -:  733:  int index;
    #####:  734:  int currentPlayer = whoseTurn(state);
    #####:  735:  int nextPlayer = currentPlayer + 1;
        -:  736:
    #####:  737:  int tributeRevealedCards[2] = {-1, -1};
        -:  738:  int temphand[MAX_HAND];// moved above the if statement
    #####:  739:  int drawntreasure=0;
        -:  740:  int cardDrawn;
    #####:  741:  int z = 0;// this is the counter for the temp hand
    #####:  742:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  743:    nextPlayer = 0;
    #####:  744:  }
        -:  745:  
        -:  746:
        -:  747:  //uses switch to select card and perform actions
    #####:  748:  switch( card ) 
        -:  749:    {
        -:  750:    case adventurer:
    #####:  751:      playAdventurer(state, currentPlayer, &z, & cardDrawn, & drawntreasure, temphand);
    #####:  752:      return 0;
        -:  753:
        -:  754:    case council_room:
        -:  755:      //+4 Cards
    #####:  756:      for (i = 0; i < 4; i++)
        -:  757:      {
    #####:  758:        drawCard(currentPlayer, state);
    #####:  759:      }
        -:  760:
        -:  761:      //+1 Buy
    #####:  762:      state->numBuys++;
        -:  763:
        -:  764:      //Each other player draws a card
    #####:  765:      for (i = 0; i < state->numPlayers; i++)
        -:  766:      {
    #####:  767:        if ( i != currentPlayer )
        -:  768:          {
    #####:  769:            drawCard(i, state);
    #####:  770:          }
    #####:  771:      }
        -:  772:
        -:  773:      //put played card in played card pile
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  782:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
    #####:  791:        if (supplyCount(choice1, state) <= 0){
        -:  792:          if (DEBUG)
        -:  793:            printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:          if (DEBUG){
        -:  796:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:          }
    #####:  798:        }
    #####:  799:        else if (state->coins < getCost(choice1)){
    #####:  800:          printf("That card is too expensive!\n");
        -:  801:
        -:  802:          if (DEBUG){
        -:  803:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:          }
    #####:  805:        }
        -:  806:        else{
        -:  807:
        -:  808:          if (DEBUG){
        -:  809:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:          }
        -:  811:
    #####:  812:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:          x = 0;//No more buying cards
        -:  814:
        -:  815:          if (DEBUG){
        -:  816:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:          }
        -:  818:
        -:  819:        }
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  824:state->hand[currentPlayer][i] = temphand[i];
    #####:  825:temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      
    #####:  829:      return 0;
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:      {
    #####:  839:        return -1;
        -:  840:      }
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:      {
    #####:  849:        return -1;
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);
    #####:  863:            break;
        -:  864:          }
    #####:  865:      }
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  884:      {
    #####:  885:        if (state->hand[currentPlayer][i] == j)
        -:  886:          {
    #####:  887:            discardCard(i, currentPlayer, state, 0);
    #####:  888:            break;
        -:  889:          }
    #####:  890:      }
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case smithy:
    #####:  896:      playSmithy(state, currentPlayer, handPos);
    #####:  897:      return 0;
        -:  898:
        -:  899:    case village:
    #####:  900:      playVillage(state, currentPlayer, handPos);
    #####:  901:      return 0;
        -:  902:
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:        int p = 0;//Iterator for hand!
    #####:  907:        int card_not_discarded = 1;//Flag for discard set!
    #####:  908:        while(card_not_discarded){
    #####:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:            state->discardCount[currentPlayer]++;
    #####:  913:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  915:            }
    #####:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:            state->handCount[currentPlayer]--;
    #####:  918:            card_not_discarded = 0;//Exit the loop
    #####:  919:          }
    #####:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
    #####:  925:            if (supplyCount(estate, state) > 0){
    #####:  926:              gainCard(estate, state, 0, currentPlayer);
    #####:  927:              state->supplyCount[estate]--;//Decrement estates
    #####:  928:              if (supplyCount(estate, state) == 0){
    #####:  929:        isGameOver(state);
    #####:  930:              }
    #####:  931:            }
    #####:  932:            card_not_discarded = 0;//Exit the loop
    #####:  933:          }
        -:  934:      
        -:  935:          else{
    #####:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
    #####:  939:      }
        -:  940:    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
    #####:  947:          }
    #####:  948:        }
        -:  949:      }
        -:  950:    
        -:  951:      
    #####:  952:      return 0;
        -:  953:
        -:  954:    case great_hall:
    #####:  955:      playGreatHall( state, currentPlayer, handPos);
    #####:  956:      return 0;
        -:  957:
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
    #####:  965:      if (choice1)//+2 coins
        -:  966:      {
    #####:  967:        state->coins = state->coins + 2;
    #####:  968:      }
        -:  969:
    #####:  970:      else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:      {
        -:  972:        //discard hand
    #####:  973:        while(numHandCards(state) > 0)
        -:  974:        {
    #####:  975:          discardCard(handPos, currentPlayer, state, 0);
        -:  976:        }
        -:  977:
        -:  978:        //draw 4
    #####:  979:        for (i = 0; i < 4; i++)
        -:  980:        {
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:
        -:  984:        //other players discard hand and redraw if hand size > 4
    #####:  985:        for (i = 0; i < state->numPlayers; i++)
        -:  986:        {
    #####:  987:          if (i != currentPlayer)
        -:  988:            {
    #####:  989:              if ( state->handCount[i] > 4 )
        -:  990:              {
        -:  991:                //discard hand
    #####:  992:                while( state->handCount[i] > 0 )
        -:  993:                {
    #####:  994:                  discardCard(handPos, i, state, 0);
        -:  995:                }
        -:  996:
        -:  997:                //draw 4
    #####:  998:                for (j = 0; j < 4; j++)
        -:  999:                {
    #####: 1000:                  drawCard(i, state);
    #####: 1001:                }
    #####: 1002:              }
    #####: 1003:            }
    #####: 1004:          }
        -: 1005:
    #####: 1006:      }
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:      playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:        if (state->deckCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:          state->deckCount[nextPlayer]--;
    #####: 1018:        }
    #####: 1019:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:          state->discardCount[nextPlayer]--;
    #####: 1022:        }
        -: 1023:        else{
        -: 1024:          //No Card to Reveal
        -: 1025:          if (DEBUG){
        -: 1026:            printf("No cards to reveal\n");
        -: 1027:          }
        -: 1028:        }
    #####: 1029:      }
        -: 1030:    
        -: 1031:      else{
    #####: 1032:        if (state->deckCount[nextPlayer] == 0){
    #####: 1033:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:            state->deckCount[nextPlayer]++;
    #####: 1036:            state->discard[nextPlayer][i] = -1;
    #####: 1037:            state->discardCount[nextPlayer]--;
    #####: 1038:          }
        -: 1039:    
    #####: 1040:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1041:        } 
    #####: 1042:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:        state->deckCount[nextPlayer]--;
    #####: 1045:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:        state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:        state->playedCardCount++;
    #####: 1053:        tributeRevealedCards[1] = -1;
    #####: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:          state->coins += 2;
    #####: 1059:        }
        -: 1060:            
    #####: 1061:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:          drawCard(currentPlayer, state);
    #####: 1063:          drawCard(currentPlayer, state);
    #####: 1064:        }
        -: 1065:        else{//Action Card
    #####: 1066:          state->numActions = state->numActions + 2;
        -: 1067:        }
    #####: 1068:      }
        -: 1069:    
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:      {
    #####: 1077:        return -1;
        -: 1078:      }
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:      {
    #####: 1082:        return -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:      {
    #####: 1087:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:          {
    #####: 1089:            j++;
    #####: 1090:          }
    #####: 1091:      }
    #####: 1092:      if (j < choice2)
        -: 1093:      {
    #####: 1094:        return -1;
        -: 1095:      }
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:      {
    #####: 1106:        if (i != currentPlayer)
        -: 1107:          {
    #####: 1108:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1109:          }
    #####: 1110:      }
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:      {
    #####: 1118:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:        {
    #####: 1120:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:          {
    #####: 1122:            discardCard(i, currentPlayer, state, 1);
    #####: 1123:            break;
        -: 1124:          }
    #####: 1125:        }
    #####: 1126:      }
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:      {
    #####: 1135:        if (i != currentPlayer)
        -: 1136:        {
    #####: 1137:          for (j = 0; j < state->handCount[i]; j++)
        -: 1138:          {
    #####: 1139:            if (state->hand[i][j] == copper)
        -: 1140:            {
    #####: 1141:              discardCard(j, i, state, 0);
    #####: 1142:              break;
        -: 1143:            }
    #####: 1144:            if (j == state->handCount[i])
        -: 1145:            {
    #####: 1146:              for (k = 0; k < state->handCount[i]; k++)
        -: 1147:              {
        -: 1148:                if (DEBUG)
        -: 1149:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1150:              }
    #####: 1151:              break;
        -: 1152:            }
    #####: 1153:          }
        -: 1154:
    #####: 1155:        }
        -: 1156:
    #####: 1157:      }
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:      {
    #####: 1172:        return -1;
        -: 1173:      }
        -: 1174:
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:
    #####: 1194:      if (choice1)
        -: 1195:      {
        -: 1196:        //gain coins equal to trashed card
    #####: 1197:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:        //trash card
    #####: 1199:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1200:      }
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:        if (i != currentPlayer){
    #####: 1209:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];    state->deckCount[i]--;
    #####: 1210:          state->discardCount[i]++;
    #####: 1211:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1212:        }
    #####: 1213:      }
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:      {
    #####: 1221:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:          {
    #####: 1223:            index = i;
    #####: 1224:            break;
        -: 1225:          }
    #####: 1226:      }
    #####: 1227:      if (index > -1)
        -: 1228:      {
        -: 1229:        //trash both treasure cards
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:        //gain 4 Gold cards
    #####: 1234:        for (i = 0; i < 4; i++)
        -: 1235:          {
    #####: 1236:            gainCard(gold, state, 1, currentPlayer);
    #####: 1237:          }
        -: 1238:
        -: 1239:        //return success
    #####: 1240:        return 1;
        -: 1241:      }
        -: 1242:
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:  return -1;
    #####: 1248:}
        -: 1249:
        -: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:  //if card is not trashed, added to Played pile 
    #####: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
    #####: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:      state->playedCardCount++;
    #####: 1259:    }
        -: 1260:
        -: 1261:  //set played card to -1
    #####: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:  //remove card from player's hand
    #####: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
    #####: 1269:    }
    #####: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        -: 1275:  else 
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
    #####: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
    #####: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:  return 0;
        -: 1286:}
        -: 1287:
        -: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
    #####: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
    #####: 1307:    }
    #####: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
    #####: 1312:    }
        -: 1313:  else
        -: 1314:    {
    #####: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:  //decrease number in supply pile
    #####: 1320:  state->supplyCount[supplyPos]--;
        -: 1321: 
    #####: 1322:  return 0;
    #####: 1323:}
        -: 1324:
        -: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:
        -: 1329:  //reset coin count
        3: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
       36: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:  {
       15: 1335:    if (state->hand[player][i] == copper)
        -: 1336:    {
       15: 1337:      state->coins += 1;
       15: 1338:    }
    #####: 1339:    else if (state->hand[player][i] == silver)
        -: 1340:    {
    #####: 1341:      state->coins += 2;
    #####: 1342:    }
    #####: 1343:    else if (state->hand[player][i] == gold)
        -: 1344:    {
    #####: 1345:      state->coins += 3;
    #####: 1346:    }
       15: 1347:  }
        -: 1348:
        -: 1349:  //add bonus
        3: 1350:  state->coins += bonus;
        -: 1351:
        3: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
****************************************************
 test buyCard function
****************************************************
Testing numBuys is less than 1
Should return -1, actual: -1
****************************************************
test not enough coins
Should return -1, actual: -1
****************************************************
Test not enough of a card available
Should return -1, actual: -1
****************************************************
Test for when the buy is successfulStarted with 10 coins; village cost 3 should be 7
expected coins 7, actual: 7
Started with 10 buys; village should use 1
expected buys 9, actual: 9
****************************************************
Tests Completed
Passing Tests: 5
Failing Tests: 0
File 'dominion.c'
Lines executed:20.40% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      154:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      154:   11:  if (*(int*)a < *(int*)b)
       55:   12:    return -1;
       99:   13:  return 0;
      154:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        4:   44:  SelectStream(1);
        4:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
      760:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
      400:   65:      }
       40:   66:   } 
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        4:   72:  if (numPlayers == 2)
        -:   73:    {
        2:   74:      state->supplyCount[curse] = 10;
        2:   75:    }
        2:   76:  else if (numPlayers == 3)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 20;
        1:   79:    }
        -:   80:  else
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        4:   86:  if (numPlayers == 2)
        -:   87:    {
        2:   88:      state->supplyCount[estate] = 8;
        2:   89:      state->supplyCount[duchy] = 8;
        2:   90:      state->supplyCount[province] = 8;
        2:   91:    }
        -:   92:  else
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 12;
        2:   95:      state->supplyCount[duchy] = 12;
        2:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        4:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  101:  state->supplyCount[silver] = 40;
        4:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      168:  105:  for (i = adventurer; i <= treasure_map; i++)       //loop all cards
        -:  106:  {
     1320:  107:    for (j = 0; j < 10; j++)           //loop chosen cards
        -:  108:    {
      620:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
       80:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
    #####:  114:          if (numPlayers == 2){ 
    #####:  115:            state->supplyCount[i] = 8; 
    #####:  116:          }
    #####:  117:          else{ state->supplyCount[i] = 12; }
    #####:  118:        }
        -:  119:        else
        -:  120:        {
       40:  121:          state->supplyCount[i] = 10;
        -:  122:        }
       40:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:        {
      580:  127:          state->supplyCount[i] = -1;
        -:  128:        }
      580:  129:    }
        -:  130:
       80:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       30:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
       11:  139:    state->deckCount[i] = 0;
       88:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       33:  142:      state->deck[i][j] = estate;
       33:  143:      state->deckCount[i]++;
       33:  144:    }
      176:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
       77:  147:      state->deck[i][j] = copper;
       77:  148:      state->deckCount[i]++;
       77:  149:    }
       11:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       30:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
       11:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:    return -1;
        -:  158:    }
       11:  159:  }
        -:  160:
        -:  161:  //draw player hands
       30:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {  
        -:  164:    //initialize hand size to zero
       11:  165:    state->handCount[i] = 0;
       11:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //{
        -:  170:    //  drawCard(i, state);
        -:  171:    //}
       11:  172:  }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      224:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
      108:  177:    state->embargoTokens[i] = 0;
      108:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
        4:  181:  state->outpostPlayed = 0;
        4:  182:  state->phase = 0;
        4:  183:  state->numActions = 1;
        4:  184:  state->numBuys = 1;
        4:  185:  state->playedCardCount = 0;
        4:  186:  state->whoseTurn = 0;
        4:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       48:  191:  for (it = 0; it < 5; it++){
       20:  192:    drawCard(state->whoseTurn, state);
       20:  193:  }
        -:  194:
        4:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        4:  197:  return 0;
        4:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       11:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       11:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
       11:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      242:  213:  while (state->deckCount[player] > 0) {
      110:  214:    card = floor(Random() * state->deckCount[player]);
      110:  215:    newDeck[newDeckPos] = state->deck[player][card];
      110:  216:    newDeckPos++;
      802:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      291:  218:      state->deck[player][i] = state->deck[player][i+1];
      291:  219:    }
      110:  220:    state->deckCount[player]--;
        -:  221:  }
      242:  222:  for (i = 0; i < newDeckPos; i++) {
      110:  223:    state->deck[player][i] = newDeck[i];
      110:  224:    state->deckCount[player]++;
      110:  225:  }
        -:  226:
       11:  227:  return 0;
       11:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:  {
    #####:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
    #####:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
    #####:  268:  return 0;
    #####:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        1:  288:    return -1;
        2:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        4:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
    #####:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
    #####:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
    #####:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:      {
    #####:  405:        j++;
    #####:  406:      }
    #####:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    #####:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:      {
    #####:  468:        players[i] = -9999;
    #####:  469:      }
        -:  470:      else
        -:  471:      {
    #####:  472:        players[i] = scoreFor (i, state);
        -:  473:      }
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
    #####:  483:    }
    #####:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
    #####:  494:    }
    #####:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
    #####:  504:    }
    #####:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
    #####:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
    #####:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{
        -:  526:  int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:  else{
       20:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       20:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  575:    state->deckCount[player]--;
       20:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       20:  579:  return 0;
       20:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
        3:  584:  switch( cardNumber ) 
        -:  585:  {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
        3:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:  }
        -:  641:
    #####:  642:  return -1;
        3:  643:}
        -:  644:
        -:  645:void playAdventurer( struct gameState * state, int currentPlayer, int * z, int * cardDrawn, int * drawntreasure, int * temphand)
        -:  646:{
    #####:  647:  while(*drawntreasure <2){
    #####:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:      shuffle(currentPlayer, state);
    #####:  650:    }
    #####:  651:    drawCard(currentPlayer, state);
    #####:  652:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  653:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
        -:  654:    //drawntreasure should be 1 or 2
    #####:  655:    *drawntreasure = *drawntreasure + 2;
        -:  656:    else{
    #####:  657:      temphand[*z]= *cardDrawn;
    #####:  658:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:      *z = *z + 1;
        -:  660:    }
        -:  661:  }
    #####:  662:  while(*z-1>=0){
    #####:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  664:    *z = *z-1;
        -:  665:  }
    #####:  666:}
        -:  667:void playSmithy( struct gameState * state, int currentPlayer, int handPos)
        -:  668:{
        -:  669:  //+3 Cards
    #####:  670:  for (int i = 0; i < 3; i++)
        -:  671:  {
    #####:  672:    drawCard(currentPlayer, state);
    #####:  673:  }
        -:  674:  // shouldn't be here but gives player two more coins
    #####:  675:  state->coins += 2;
        -:  676:  //discard card from hand
    #####:  677:  discardCard(handPos, currentPlayer, state, 0);
    #####:  678:}
        -:  679:void playVillage( struct gameState * state, int currentPlayer, int handPos)
        -:  680:{
        -:  681:  //+1 Card
    #####:  682:  drawCard(currentPlayer, state);
        -:  683:  // this line increased numbers of buys should not happen
    #####:  684:  state->numBuys++;//Increase buys by 1!
        -:  685:  //+2 Actions
    #####:  686:  state->numActions = state->numActions + 2;
        -:  687:  //discard played card from hand
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
    #####:  689:}
        -:  690:void playGreatHall( struct gameState * state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:        //+1 Card
    #####:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+1 Actions
        -:  696:      // should be 1 but I changed to two actions. A.P.
    #####:  697:      state->numActions = state->numActions + 2;
        -:  698:
        -:  699:      //discard card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:}
        -:  702:void playSteward( struct gameState * state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -:  703:{
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
        -:  707:    //should be +2 but I changed to 3 A.P.
    #####:  708:    drawCard(currentPlayer, state);
    #####:  709:    drawCard(currentPlayer, state);
    #####:  710:    drawCard(currentPlayer, state);
    #####:  711:  }
    #####:  712:  else if (choice1 == 2)
        -:  713:  {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
    #####:  716:  }
        -:  717:  else
        -:  718:  {
        -:  719:    //trash 2 cards in hand
    #####:  720:    discardCard(choice2, currentPlayer, state, 1);
    #####:  721:    discardCard(choice3, currentPlayer, state, 1);
        -:  722:  }
        -:  723:
        -:  724:  //discard card from hand
    #####:  725:  discardCard(handPos, currentPlayer, state, 0);
    #####:  726:}
        -:  727:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  728:{
        -:  729:  int i;
        -:  730:  int j;
        -:  731:  int k;
        -:  732:  int x;
        -:  733:  int index;
    #####:  734:  int currentPlayer = whoseTurn(state);
    #####:  735:  int nextPlayer = currentPlayer + 1;
        -:  736:
    #####:  737:  int tributeRevealedCards[2] = {-1, -1};
        -:  738:  int temphand[MAX_HAND];// moved above the if statement
    #####:  739:  int drawntreasure=0;
        -:  740:  int cardDrawn;
    #####:  741:  int z = 0;// this is the counter for the temp hand
    #####:  742:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  743:    nextPlayer = 0;
    #####:  744:  }
        -:  745:  
        -:  746:
        -:  747:  //uses switch to select card and perform actions
    #####:  748:  switch( card ) 
        -:  749:    {
        -:  750:    case adventurer:
    #####:  751:      playAdventurer(state, currentPlayer, &z, & cardDrawn, & drawntreasure, temphand);
    #####:  752:      return 0;
        -:  753:
        -:  754:    case council_room:
        -:  755:      //+4 Cards
    #####:  756:      for (i = 0; i < 4; i++)
        -:  757:      {
    #####:  758:        drawCard(currentPlayer, state);
    #####:  759:      }
        -:  760:
        -:  761:      //+1 Buy
    #####:  762:      state->numBuys++;
        -:  763:
        -:  764:      //Each other player draws a card
    #####:  765:      for (i = 0; i < state->numPlayers; i++)
        -:  766:      {
    #####:  767:        if ( i != currentPlayer )
        -:  768:          {
    #####:  769:            drawCard(i, state);
    #####:  770:          }
    #####:  771:      }
        -:  772:
        -:  773:      //put played card in played card pile
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  782:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
    #####:  791:        if (supplyCount(choice1, state) <= 0){
        -:  792:          if (DEBUG)
        -:  793:            printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:          if (DEBUG){
        -:  796:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:          }
    #####:  798:        }
    #####:  799:        else if (state->coins < getCost(choice1)){
    #####:  800:          printf("That card is too expensive!\n");
        -:  801:
        -:  802:          if (DEBUG){
        -:  803:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:          }
    #####:  805:        }
        -:  806:        else{
        -:  807:
        -:  808:          if (DEBUG){
        -:  809:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:          }
        -:  811:
    #####:  812:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:          x = 0;//No more buying cards
        -:  814:
        -:  815:          if (DEBUG){
        -:  816:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:          }
        -:  818:
        -:  819:        }
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  824:state->hand[currentPlayer][i] = temphand[i];
    #####:  825:temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      
    #####:  829:      return 0;
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:      {
    #####:  839:        return -1;
        -:  840:      }
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:      {
    #####:  849:        return -1;
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);
    #####:  863:            break;
        -:  864:          }
    #####:  865:      }
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  884:      {
    #####:  885:        if (state->hand[currentPlayer][i] == j)
        -:  886:          {
    #####:  887:            discardCard(i, currentPlayer, state, 0);
    #####:  888:            break;
        -:  889:          }
    #####:  890:      }
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case smithy:
    #####:  896:      playSmithy(state, currentPlayer, handPos);
    #####:  897:      return 0;
        -:  898:
        -:  899:    case village:
    #####:  900:      playVillage(state, currentPlayer, handPos);
    #####:  901:      return 0;
        -:  902:
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:        int p = 0;//Iterator for hand!
    #####:  907:        int card_not_discarded = 1;//Flag for discard set!
    #####:  908:        while(card_not_discarded){
    #####:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:            state->discardCount[currentPlayer]++;
    #####:  913:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  915:            }
    #####:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:            state->handCount[currentPlayer]--;
    #####:  918:            card_not_discarded = 0;//Exit the loop
    #####:  919:          }
    #####:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
    #####:  925:            if (supplyCount(estate, state) > 0){
    #####:  926:              gainCard(estate, state, 0, currentPlayer);
    #####:  927:              state->supplyCount[estate]--;//Decrement estates
    #####:  928:              if (supplyCount(estate, state) == 0){
    #####:  929:        isGameOver(state);
    #####:  930:              }
    #####:  931:            }
    #####:  932:            card_not_discarded = 0;//Exit the loop
    #####:  933:          }
        -:  934:      
        -:  935:          else{
    #####:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
    #####:  939:      }
        -:  940:    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
    #####:  947:          }
    #####:  948:        }
        -:  949:      }
        -:  950:    
        -:  951:      
    #####:  952:      return 0;
        -:  953:
        -:  954:    case great_hall:
    #####:  955:      playGreatHall( state, currentPlayer, handPos);
    #####:  956:      return 0;
        -:  957:
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
    #####:  965:      if (choice1)//+2 coins
        -:  966:      {
    #####:  967:        state->coins = state->coins + 2;
    #####:  968:      }
        -:  969:
    #####:  970:      else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:      {
        -:  972:        //discard hand
    #####:  973:        while(numHandCards(state) > 0)
        -:  974:        {
    #####:  975:          discardCard(handPos, currentPlayer, state, 0);
        -:  976:        }
        -:  977:
        -:  978:        //draw 4
    #####:  979:        for (i = 0; i < 4; i++)
        -:  980:        {
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:
        -:  984:        //other players discard hand and redraw if hand size > 4
    #####:  985:        for (i = 0; i < state->numPlayers; i++)
        -:  986:        {
    #####:  987:          if (i != currentPlayer)
        -:  988:            {
    #####:  989:              if ( state->handCount[i] > 4 )
        -:  990:              {
        -:  991:                //discard hand
    #####:  992:                while( state->handCount[i] > 0 )
        -:  993:                {
    #####:  994:                  discardCard(handPos, i, state, 0);
        -:  995:                }
        -:  996:
        -:  997:                //draw 4
    #####:  998:                for (j = 0; j < 4; j++)
        -:  999:                {
    #####: 1000:                  drawCard(i, state);
    #####: 1001:                }
    #####: 1002:              }
    #####: 1003:            }
    #####: 1004:          }
        -: 1005:
    #####: 1006:      }
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:      playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:        if (state->deckCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:          state->deckCount[nextPlayer]--;
    #####: 1018:        }
    #####: 1019:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:          state->discardCount[nextPlayer]--;
    #####: 1022:        }
        -: 1023:        else{
        -: 1024:          //No Card to Reveal
        -: 1025:          if (DEBUG){
        -: 1026:            printf("No cards to reveal\n");
        -: 1027:          }
        -: 1028:        }
    #####: 1029:      }
        -: 1030:    
        -: 1031:      else{
    #####: 1032:        if (state->deckCount[nextPlayer] == 0){
    #####: 1033:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:            state->deckCount[nextPlayer]++;
    #####: 1036:            state->discard[nextPlayer][i] = -1;
    #####: 1037:            state->discardCount[nextPlayer]--;
    #####: 1038:          }
        -: 1039:    
    #####: 1040:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1041:        } 
    #####: 1042:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:        state->deckCount[nextPlayer]--;
    #####: 1045:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:        state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:        state->playedCardCount++;
    #####: 1053:        tributeRevealedCards[1] = -1;
    #####: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:          state->coins += 2;
    #####: 1059:        }
        -: 1060:            
    #####: 1061:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:          drawCard(currentPlayer, state);
    #####: 1063:          drawCard(currentPlayer, state);
    #####: 1064:        }
        -: 1065:        else{//Action Card
    #####: 1066:          state->numActions = state->numActions + 2;
        -: 1067:        }
    #####: 1068:      }
        -: 1069:    
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:      {
    #####: 1077:        return -1;
        -: 1078:      }
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:      {
    #####: 1082:        return -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:      {
    #####: 1087:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:          {
    #####: 1089:            j++;
    #####: 1090:          }
    #####: 1091:      }
    #####: 1092:      if (j < choice2)
        -: 1093:      {
    #####: 1094:        return -1;
        -: 1095:      }
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:      {
    #####: 1106:        if (i != currentPlayer)
        -: 1107:          {
    #####: 1108:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1109:          }
    #####: 1110:      }
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:      {
    #####: 1118:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:        {
    #####: 1120:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:          {
    #####: 1122:            discardCard(i, currentPlayer, state, 1);
    #####: 1123:            break;
        -: 1124:          }
    #####: 1125:        }
    #####: 1126:      }
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:      {
    #####: 1135:        if (i != currentPlayer)
        -: 1136:        {
    #####: 1137:          for (j = 0; j < state->handCount[i]; j++)
        -: 1138:          {
    #####: 1139:            if (state->hand[i][j] == copper)
        -: 1140:            {
    #####: 1141:              discardCard(j, i, state, 0);
    #####: 1142:              break;
        -: 1143:            }
    #####: 1144:            if (j == state->handCount[i])
        -: 1145:            {
    #####: 1146:              for (k = 0; k < state->handCount[i]; k++)
        -: 1147:              {
        -: 1148:                if (DEBUG)
        -: 1149:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1150:              }
    #####: 1151:              break;
        -: 1152:            }
    #####: 1153:          }
        -: 1154:
    #####: 1155:        }
        -: 1156:
    #####: 1157:      }
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:      {
    #####: 1172:        return -1;
        -: 1173:      }
        -: 1174:
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:
    #####: 1194:      if (choice1)
        -: 1195:      {
        -: 1196:        //gain coins equal to trashed card
    #####: 1197:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:        //trash card
    #####: 1199:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1200:      }
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:        if (i != currentPlayer){
    #####: 1209:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];    state->deckCount[i]--;
    #####: 1210:          state->discardCount[i]++;
    #####: 1211:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1212:        }
    #####: 1213:      }
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:      {
    #####: 1221:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:          {
    #####: 1223:            index = i;
    #####: 1224:            break;
        -: 1225:          }
    #####: 1226:      }
    #####: 1227:      if (index > -1)
        -: 1228:      {
        -: 1229:        //trash both treasure cards
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:        //gain 4 Gold cards
    #####: 1234:        for (i = 0; i < 4; i++)
        -: 1235:          {
    #####: 1236:            gainCard(gold, state, 1, currentPlayer);
    #####: 1237:          }
        -: 1238:
        -: 1239:        //return success
    #####: 1240:        return 1;
        -: 1241:      }
        -: 1242:
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:  return -1;
    #####: 1248:}
        -: 1249:
        -: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:  //if card is not trashed, added to Played pile 
    #####: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
    #####: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:      state->playedCardCount++;
    #####: 1259:    }
        -: 1260:
        -: 1261:  //set played card to -1
    #####: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:  //remove card from player's hand
    #####: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
    #####: 1269:    }
    #####: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        -: 1275:  else 
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
    #####: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
    #####: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:  return 0;
        -: 1286:}
        -: 1287:
        -: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
        1: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
    #####: 1307:    }
        1: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
    #####: 1312:    }
        -: 1313:  else
        -: 1314:    {
        1: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:  //decrease number in supply pile
        1: 1320:  state->supplyCount[supplyPos]--;
        -: 1321: 
        1: 1322:  return 0;
        1: 1323:}
        -: 1324:
        -: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:
        -: 1329:  //reset coin count
        4: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
       48: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:  {
       20: 1335:    if (state->hand[player][i] == copper)
        -: 1336:    {
       20: 1337:      state->coins += 1;
       20: 1338:    }
    #####: 1339:    else if (state->hand[player][i] == silver)
        -: 1340:    {
    #####: 1341:      state->coins += 2;
    #####: 1342:    }
    #####: 1343:    else if (state->hand[player][i] == gold)
        -: 1344:    {
    #####: 1345:      state->coins += 3;
    #####: 1346:    }
       20: 1347:  }
        -: 1348:
        -: 1349:  //add bonus
        4: 1350:  state->coins += bonus;
        -: 1351:
        4: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
***********************************************************
Testing getCost function
***********************************************************
Cost of curse should be 0
expected 0, actual: 0
***********************************************************
Cost of estate should be 2
expected 2, actual: 2
***********************************************************
Cost of duchy should be 0
expected 5, actual: 5
***********************************************************
Cost of province should be 8
expected 8, actual: 8
***********************************************************
Cost of copper should be 0
expected 0, actual: 0
***********************************************************
Cost of silver should be 3
expected 3, actual: 3
***********************************************************
Cost of gold should be 6
expected 6, actual: 6
***********************************************************
Cost of adventurer should be 6
expected 6, actual: 6
***********************************************************
Cost of council_room should be 5
expected 5, actual: 5
***********************************************************
Cost of feast should be 4
expected 4, actual: 4
***********************************************************
Cost of gardens should be 4
expected 4, actual: 4
***********************************************************
Cost of mine should be 5
expected 5, actual: 11
***********************************************************
Cost of remodel should be 4
expected 4, actual: 4
***********************************************************
Cost of smithy should be 4
expected 4, actual: 4
***********************************************************
Cost of village should be 3
expected 3, actual: 3
***********************************************************
Cost of baron should be 4
expected 4, actual: 4
***********************************************************
Cost of great_hall should be 3
expected 3, actual: 3
***********************************************************
Cost of minion should be 3
expected 5, actual: 5
***********************************************************
Cost of steward should be 3
expected 3, actual: 3
***********************************************************
Cost of tribute should be 5
expected 5, actual: 5
***********************************************************
***********************************************************
Cost of cutpurse should be 4
expected 4, actual: 4
***********************************************************
Cost of ambassador should be 3
expected 3, actual: 3
***********************************************************
Cost of embargo should be 2
expected 2, actual: 2
***********************************************************
Cost of outpst should be 5
expected 5, actual: 5
***********************************************************
Cost of salvager should be 4
expected 4, actual: 4
***********************************************************
Cost of sea_hag should be 4
expected 4, actual: 4
***********************************************************
Cost of treasure_map should be 4
expected 4, actual: 4
***********************************************************
Passing Tests: 27 
Failing Tests: 0 
File 'dominion.c'
Lines executed:24.39% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      182:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      182:   11:  if (*(int*)a < *(int*)b)
       65:   12:    return -1;
      117:   13:  return 0;
      182:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1100:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
      950:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
      500:   65:      }
       50:   66:   } 
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        5:   72:  if (numPlayers == 2)
        -:   73:    {
        3:   74:      state->supplyCount[curse] = 10;
        3:   75:    }
        2:   76:  else if (numPlayers == 3)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 20;
        1:   79:    }
        -:   80:  else
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        5:   86:  if (numPlayers == 2)
        -:   87:    {
        3:   88:      state->supplyCount[estate] = 8;
        3:   89:      state->supplyCount[duchy] = 8;
        3:   90:      state->supplyCount[province] = 8;
        3:   91:    }
        -:   92:  else
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 12;
        2:   95:      state->supplyCount[duchy] = 12;
        2:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        5:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  101:  state->supplyCount[silver] = 40;
        5:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      210:  105:  for (i = adventurer; i <= treasure_map; i++)       //loop all cards
        -:  106:  {
     1650:  107:    for (j = 0; j < 10; j++)           //loop chosen cards
        -:  108:    {
      775:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
      100:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
    #####:  114:          if (numPlayers == 2){ 
    #####:  115:            state->supplyCount[i] = 8; 
    #####:  116:          }
    #####:  117:          else{ state->supplyCount[i] = 12; }
    #####:  118:        }
        -:  119:        else
        -:  120:        {
       50:  121:          state->supplyCount[i] = 10;
        -:  122:        }
       50:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:        {
      725:  127:          state->supplyCount[i] = -1;
        -:  128:        }
      725:  129:    }
        -:  130:
      100:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       36:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
       13:  139:    state->deckCount[i] = 0;
      104:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       39:  142:      state->deck[i][j] = estate;
       39:  143:      state->deckCount[i]++;
       39:  144:    }
      208:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
       91:  147:      state->deck[i][j] = copper;
       91:  148:      state->deckCount[i]++;
       91:  149:    }
       13:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       36:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
       13:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:    return -1;
        -:  158:    }
       13:  159:  }
        -:  160:
        -:  161:  //draw player hands
       36:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {  
        -:  164:    //initialize hand size to zero
       13:  165:    state->handCount[i] = 0;
       13:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //{
        -:  170:    //  drawCard(i, state);
        -:  171:    //}
       13:  172:  }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      280:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
      135:  177:    state->embargoTokens[i] = 0;
      135:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
        5:  181:  state->outpostPlayed = 0;
        5:  182:  state->phase = 0;
        5:  183:  state->numActions = 1;
        5:  184:  state->numBuys = 1;
        5:  185:  state->playedCardCount = 0;
        5:  186:  state->whoseTurn = 0;
        5:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       60:  191:  for (it = 0; it < 5; it++){
       25:  192:    drawCard(state->whoseTurn, state);
       25:  193:  }
        -:  194:
        5:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        5:  197:  return 0;
        5:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       13:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       13:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
       13:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      286:  213:  while (state->deckCount[player] > 0) {
      130:  214:    card = floor(Random() * state->deckCount[player]);
      130:  215:    newDeck[newDeckPos] = state->deck[player][card];
      130:  216:    newDeckPos++;
      950:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      345:  218:      state->deck[player][i] = state->deck[player][i+1];
      345:  219:    }
      130:  220:    state->deckCount[player]--;
        -:  221:  }
      286:  222:  for (i = 0; i < newDeckPos; i++) {
      130:  223:    state->deck[player][i] = newDeck[i];
      130:  224:    state->deckCount[player]++;
      130:  225:  }
        -:  226:
       13:  227:  return 0;
       13:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:  {
    #####:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
    #####:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
    #####:  268:  return 0;
    #####:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        1:  288:    return -1;
        2:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        4:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
    #####:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
    #####:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
    #####:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
    #####:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:      {
    #####:  405:        j++;
    #####:  406:      }
    #####:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    #####:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:      {
    #####:  468:        players[i] = -9999;
    #####:  469:      }
        -:  470:      else
        -:  471:      {
    #####:  472:        players[i] = scoreFor (i, state);
        -:  473:      }
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
    #####:  483:    }
    #####:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
    #####:  494:    }
    #####:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
    #####:  504:    }
    #####:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
    #####:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
    #####:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{
        -:  526:  int count;
        -:  527:  int deckCounter;
       25:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:  else{
       25:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       25:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  575:    state->deckCount[player]--;
       25:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       25:  579:  return 0;
       25:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
       30:  584:  switch( cardNumber ) 
        -:  585:  {
        -:  586:    case curse:
        1:  587:      return 0;
        -:  588:    case estate:
        1:  589:      return 2;
        -:  590:    case duchy:
        1:  591:      return 5;
        -:  592:    case province:
        1:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
        1:  597:      return 3;
        -:  598:    case gold:
        1:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
        1:  603:      return 5;
        -:  604:    case feast:
        1:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
        1:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        4:  615:      return 3;
        -:  616:    case baron:
        1:  617:      return 4;
        -:  618:    case great_hall:
        1:  619:      return 3;
        -:  620:    case minion:
        1:  621:      return 5;
        -:  622:    case steward:
        1:  623:      return 3;
        -:  624:    case tribute:
        1:  625:      return 5;
        -:  626:    case ambassador:
        1:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo: 
        1:  631:      return 2;
        -:  632:    case outpost:
        1:  633:      return 5;
        -:  634:    case salvager:
        1:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
        1:  639:      return 4;
        -:  640:  }
        -:  641:
    #####:  642:  return -1;
       30:  643:}
        -:  644:
        -:  645:void playAdventurer( struct gameState * state, int currentPlayer, int * z, int * cardDrawn, int * drawntreasure, int * temphand)
        -:  646:{
    #####:  647:  while(*drawntreasure <2){
    #####:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:      shuffle(currentPlayer, state);
    #####:  650:    }
    #####:  651:    drawCard(currentPlayer, state);
    #####:  652:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  653:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
        -:  654:    //drawntreasure should be 1 or 2
    #####:  655:    *drawntreasure = *drawntreasure + 2;
        -:  656:    else{
    #####:  657:      temphand[*z]= *cardDrawn;
    #####:  658:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:      *z = *z + 1;
        -:  660:    }
        -:  661:  }
    #####:  662:  while(*z-1>=0){
    #####:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  664:    *z = *z-1;
        -:  665:  }
    #####:  666:}
        -:  667:void playSmithy( struct gameState * state, int currentPlayer, int handPos)
        -:  668:{
        -:  669:  //+3 Cards
    #####:  670:  for (int i = 0; i < 3; i++)
        -:  671:  {
    #####:  672:    drawCard(currentPlayer, state);
    #####:  673:  }
        -:  674:  // shouldn't be here but gives player two more coins
    #####:  675:  state->coins += 2;
        -:  676:  //discard card from hand
    #####:  677:  discardCard(handPos, currentPlayer, state, 0);
    #####:  678:}
        -:  679:void playVillage( struct gameState * state, int currentPlayer, int handPos)
        -:  680:{
        -:  681:  //+1 Card
    #####:  682:  drawCard(currentPlayer, state);
        -:  683:  // this line increased numbers of buys should not happen
    #####:  684:  state->numBuys++;//Increase buys by 1!
        -:  685:  //+2 Actions
    #####:  686:  state->numActions = state->numActions + 2;
        -:  687:  //discard played card from hand
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
    #####:  689:}
        -:  690:void playGreatHall( struct gameState * state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:        //+1 Card
    #####:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+1 Actions
        -:  696:      // should be 1 but I changed to two actions. A.P.
    #####:  697:      state->numActions = state->numActions + 2;
        -:  698:
        -:  699:      //discard card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:}
        -:  702:void playSteward( struct gameState * state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -:  703:{
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
        -:  707:    //should be +2 but I changed to 3 A.P.
    #####:  708:    drawCard(currentPlayer, state);
    #####:  709:    drawCard(currentPlayer, state);
    #####:  710:    drawCard(currentPlayer, state);
    #####:  711:  }
    #####:  712:  else if (choice1 == 2)
        -:  713:  {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
    #####:  716:  }
        -:  717:  else
        -:  718:  {
        -:  719:    //trash 2 cards in hand
    #####:  720:    discardCard(choice2, currentPlayer, state, 1);
    #####:  721:    discardCard(choice3, currentPlayer, state, 1);
        -:  722:  }
        -:  723:
        -:  724:  //discard card from hand
    #####:  725:  discardCard(handPos, currentPlayer, state, 0);
    #####:  726:}
        -:  727:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  728:{
        -:  729:  int i;
        -:  730:  int j;
        -:  731:  int k;
        -:  732:  int x;
        -:  733:  int index;
    #####:  734:  int currentPlayer = whoseTurn(state);
    #####:  735:  int nextPlayer = currentPlayer + 1;
        -:  736:
    #####:  737:  int tributeRevealedCards[2] = {-1, -1};
        -:  738:  int temphand[MAX_HAND];// moved above the if statement
    #####:  739:  int drawntreasure=0;
        -:  740:  int cardDrawn;
    #####:  741:  int z = 0;// this is the counter for the temp hand
    #####:  742:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  743:    nextPlayer = 0;
    #####:  744:  }
        -:  745:  
        -:  746:
        -:  747:  //uses switch to select card and perform actions
    #####:  748:  switch( card ) 
        -:  749:    {
        -:  750:    case adventurer:
    #####:  751:      playAdventurer(state, currentPlayer, &z, & cardDrawn, & drawntreasure, temphand);
    #####:  752:      return 0;
        -:  753:
        -:  754:    case council_room:
        -:  755:      //+4 Cards
    #####:  756:      for (i = 0; i < 4; i++)
        -:  757:      {
    #####:  758:        drawCard(currentPlayer, state);
    #####:  759:      }
        -:  760:
        -:  761:      //+1 Buy
    #####:  762:      state->numBuys++;
        -:  763:
        -:  764:      //Each other player draws a card
    #####:  765:      for (i = 0; i < state->numPlayers; i++)
        -:  766:      {
    #####:  767:        if ( i != currentPlayer )
        -:  768:          {
    #####:  769:            drawCard(i, state);
    #####:  770:          }
    #####:  771:      }
        -:  772:
        -:  773:      //put played card in played card pile
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  782:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
    #####:  791:        if (supplyCount(choice1, state) <= 0){
        -:  792:          if (DEBUG)
        -:  793:            printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:          if (DEBUG){
        -:  796:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:          }
    #####:  798:        }
    #####:  799:        else if (state->coins < getCost(choice1)){
    #####:  800:          printf("That card is too expensive!\n");
        -:  801:
        -:  802:          if (DEBUG){
        -:  803:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:          }
    #####:  805:        }
        -:  806:        else{
        -:  807:
        -:  808:          if (DEBUG){
        -:  809:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:          }
        -:  811:
    #####:  812:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:          x = 0;//No more buying cards
        -:  814:
        -:  815:          if (DEBUG){
        -:  816:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:          }
        -:  818:
        -:  819:        }
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  824:state->hand[currentPlayer][i] = temphand[i];
    #####:  825:temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      
    #####:  829:      return 0;
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:      {
    #####:  839:        return -1;
        -:  840:      }
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:      {
    #####:  849:        return -1;
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);
    #####:  863:            break;
        -:  864:          }
    #####:  865:      }
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  884:      {
    #####:  885:        if (state->hand[currentPlayer][i] == j)
        -:  886:          {
    #####:  887:            discardCard(i, currentPlayer, state, 0);
    #####:  888:            break;
        -:  889:          }
    #####:  890:      }
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case smithy:
    #####:  896:      playSmithy(state, currentPlayer, handPos);
    #####:  897:      return 0;
        -:  898:
        -:  899:    case village:
    #####:  900:      playVillage(state, currentPlayer, handPos);
    #####:  901:      return 0;
        -:  902:
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:        int p = 0;//Iterator for hand!
    #####:  907:        int card_not_discarded = 1;//Flag for discard set!
    #####:  908:        while(card_not_discarded){
    #####:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:            state->discardCount[currentPlayer]++;
    #####:  913:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  915:            }
    #####:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:            state->handCount[currentPlayer]--;
    #####:  918:            card_not_discarded = 0;//Exit the loop
    #####:  919:          }
    #####:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
    #####:  925:            if (supplyCount(estate, state) > 0){
    #####:  926:              gainCard(estate, state, 0, currentPlayer);
    #####:  927:              state->supplyCount[estate]--;//Decrement estates
    #####:  928:              if (supplyCount(estate, state) == 0){
    #####:  929:        isGameOver(state);
    #####:  930:              }
    #####:  931:            }
    #####:  932:            card_not_discarded = 0;//Exit the loop
    #####:  933:          }
        -:  934:      
        -:  935:          else{
    #####:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
    #####:  939:      }
        -:  940:    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
    #####:  947:          }
    #####:  948:        }
        -:  949:      }
        -:  950:    
        -:  951:      
    #####:  952:      return 0;
        -:  953:
        -:  954:    case great_hall:
    #####:  955:      playGreatHall( state, currentPlayer, handPos);
    #####:  956:      return 0;
        -:  957:
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
    #####:  965:      if (choice1)//+2 coins
        -:  966:      {
    #####:  967:        state->coins = state->coins + 2;
    #####:  968:      }
        -:  969:
    #####:  970:      else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:      {
        -:  972:        //discard hand
    #####:  973:        while(numHandCards(state) > 0)
        -:  974:        {
    #####:  975:          discardCard(handPos, currentPlayer, state, 0);
        -:  976:        }
        -:  977:
        -:  978:        //draw 4
    #####:  979:        for (i = 0; i < 4; i++)
        -:  980:        {
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:
        -:  984:        //other players discard hand and redraw if hand size > 4
    #####:  985:        for (i = 0; i < state->numPlayers; i++)
        -:  986:        {
    #####:  987:          if (i != currentPlayer)
        -:  988:            {
    #####:  989:              if ( state->handCount[i] > 4 )
        -:  990:              {
        -:  991:                //discard hand
    #####:  992:                while( state->handCount[i] > 0 )
        -:  993:                {
    #####:  994:                  discardCard(handPos, i, state, 0);
        -:  995:                }
        -:  996:
        -:  997:                //draw 4
    #####:  998:                for (j = 0; j < 4; j++)
        -:  999:                {
    #####: 1000:                  drawCard(i, state);
    #####: 1001:                }
    #####: 1002:              }
    #####: 1003:            }
    #####: 1004:          }
        -: 1005:
    #####: 1006:      }
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:      playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:        if (state->deckCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:          state->deckCount[nextPlayer]--;
    #####: 1018:        }
    #####: 1019:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:          state->discardCount[nextPlayer]--;
    #####: 1022:        }
        -: 1023:        else{
        -: 1024:          //No Card to Reveal
        -: 1025:          if (DEBUG){
        -: 1026:            printf("No cards to reveal\n");
        -: 1027:          }
        -: 1028:        }
    #####: 1029:      }
        -: 1030:    
        -: 1031:      else{
    #####: 1032:        if (state->deckCount[nextPlayer] == 0){
    #####: 1033:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:            state->deckCount[nextPlayer]++;
    #####: 1036:            state->discard[nextPlayer][i] = -1;
    #####: 1037:            state->discardCount[nextPlayer]--;
    #####: 1038:          }
        -: 1039:    
    #####: 1040:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1041:        } 
    #####: 1042:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:        state->deckCount[nextPlayer]--;
    #####: 1045:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:        state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:        state->playedCardCount++;
    #####: 1053:        tributeRevealedCards[1] = -1;
    #####: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:          state->coins += 2;
    #####: 1059:        }
        -: 1060:            
    #####: 1061:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:          drawCard(currentPlayer, state);
    #####: 1063:          drawCard(currentPlayer, state);
    #####: 1064:        }
        -: 1065:        else{//Action Card
    #####: 1066:          state->numActions = state->numActions + 2;
        -: 1067:        }
    #####: 1068:      }
        -: 1069:    
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:      {
    #####: 1077:        return -1;
        -: 1078:      }
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:      {
    #####: 1082:        return -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:      {
    #####: 1087:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:          {
    #####: 1089:            j++;
    #####: 1090:          }
    #####: 1091:      }
    #####: 1092:      if (j < choice2)
        -: 1093:      {
    #####: 1094:        return -1;
        -: 1095:      }
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:      {
    #####: 1106:        if (i != currentPlayer)
        -: 1107:          {
    #####: 1108:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1109:          }
    #####: 1110:      }
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:      {
    #####: 1118:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:        {
    #####: 1120:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:          {
    #####: 1122:            discardCard(i, currentPlayer, state, 1);
    #####: 1123:            break;
        -: 1124:          }
    #####: 1125:        }
    #####: 1126:      }
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:      {
    #####: 1135:        if (i != currentPlayer)
        -: 1136:        {
    #####: 1137:          for (j = 0; j < state->handCount[i]; j++)
        -: 1138:          {
    #####: 1139:            if (state->hand[i][j] == copper)
        -: 1140:            {
    #####: 1141:              discardCard(j, i, state, 0);
    #####: 1142:              break;
        -: 1143:            }
    #####: 1144:            if (j == state->handCount[i])
        -: 1145:            {
    #####: 1146:              for (k = 0; k < state->handCount[i]; k++)
        -: 1147:              {
        -: 1148:                if (DEBUG)
        -: 1149:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1150:              }
    #####: 1151:              break;
        -: 1152:            }
    #####: 1153:          }
        -: 1154:
    #####: 1155:        }
        -: 1156:
    #####: 1157:      }
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:      {
    #####: 1172:        return -1;
        -: 1173:      }
        -: 1174:
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:
    #####: 1194:      if (choice1)
        -: 1195:      {
        -: 1196:        //gain coins equal to trashed card
    #####: 1197:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:        //trash card
    #####: 1199:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1200:      }
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:        if (i != currentPlayer){
    #####: 1209:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];    state->deckCount[i]--;
    #####: 1210:          state->discardCount[i]++;
    #####: 1211:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1212:        }
    #####: 1213:      }
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:      {
    #####: 1221:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:          {
    #####: 1223:            index = i;
    #####: 1224:            break;
        -: 1225:          }
    #####: 1226:      }
    #####: 1227:      if (index > -1)
        -: 1228:      {
        -: 1229:        //trash both treasure cards
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:        //gain 4 Gold cards
    #####: 1234:        for (i = 0; i < 4; i++)
        -: 1235:          {
    #####: 1236:            gainCard(gold, state, 1, currentPlayer);
    #####: 1237:          }
        -: 1238:
        -: 1239:        //return success
    #####: 1240:        return 1;
        -: 1241:      }
        -: 1242:
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:  return -1;
    #####: 1248:}
        -: 1249:
        -: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:  //if card is not trashed, added to Played pile 
    #####: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
    #####: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1258:      state->playedCardCount++;
    #####: 1259:    }
        -: 1260:
        -: 1261:  //set played card to -1
    #####: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:  //remove card from player's hand
    #####: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
    #####: 1269:    }
    #####: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        -: 1275:  else 
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
    #####: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
    #####: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
    #####: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
    #####: 1285:  return 0;
        -: 1286:}
        -: 1287:
        -: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
        1: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
    #####: 1307:    }
        1: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
    #####: 1312:    }
        -: 1313:  else
        -: 1314:    {
        1: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:  //decrease number in supply pile
        1: 1320:  state->supplyCount[supplyPos]--;
        -: 1321: 
        1: 1322:  return 0;
        1: 1323:}
        -: 1324:
        -: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:
        -: 1329:  //reset coin count
        5: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
       60: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:  {
       25: 1335:    if (state->hand[player][i] == copper)
        -: 1336:    {
       25: 1337:      state->coins += 1;
       25: 1338:    }
    #####: 1339:    else if (state->hand[player][i] == silver)
        -: 1340:    {
    #####: 1341:      state->coins += 2;
    #####: 1342:    }
    #####: 1343:    else if (state->hand[player][i] == gold)
        -: 1344:    {
    #####: 1345:      state->coins += 3;
    #####: 1346:    }
       25: 1347:  }
        -: 1348:
        -: 1349:  //add bonus
        5: 1350:  state->coins += bonus;
        -: 1351:
        5: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
****************************************************
Testing playCard
****************************************************
if phase is not zero should be negative 1expected -1, actual: -1
****************************************************
if actions are less than one should return -1
expected -1, actual: -1
****************************************************
 if card is not an action should be -1
expected: -1, actual: -1
****************************************************
Number of actions should be decreased by one for successful card
beg: 10, after 9
****************************************************
Tests passed: 4
Tests Failed: 0
File 'dominion.c'
Lines executed:31.60% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
       75:   12:    return -1;
      135:   13:  return 0;
      210:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1320:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
     1140:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
      600:   65:      }
       60:   66:   } 
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        6:   72:  if (numPlayers == 2)
        -:   73:    {
        4:   74:      state->supplyCount[curse] = 10;
        4:   75:    }
        2:   76:  else if (numPlayers == 3)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 20;
        1:   79:    }
        -:   80:  else
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        6:   86:  if (numPlayers == 2)
        -:   87:    {
        4:   88:      state->supplyCount[estate] = 8;
        4:   89:      state->supplyCount[duchy] = 8;
        4:   90:      state->supplyCount[province] = 8;
        4:   91:    }
        -:   92:  else
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 12;
        2:   95:      state->supplyCount[duchy] = 12;
        2:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        6:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  101:  state->supplyCount[silver] = 40;
        6:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      252:  105:  for (i = adventurer; i <= treasure_map; i++)       //loop all cards
        -:  106:  {
     1980:  107:    for (j = 0; j < 10; j++)           //loop chosen cards
        -:  108:    {
      930:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
      120:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
    #####:  114:          if (numPlayers == 2){ 
    #####:  115:            state->supplyCount[i] = 8; 
    #####:  116:          }
    #####:  117:          else{ state->supplyCount[i] = 12; }
    #####:  118:        }
        -:  119:        else
        -:  120:        {
       60:  121:          state->supplyCount[i] = 10;
        -:  122:        }
       60:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:        {
      870:  127:          state->supplyCount[i] = -1;
        -:  128:        }
      870:  129:    }
        -:  130:
      120:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       42:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
       15:  139:    state->deckCount[i] = 0;
      120:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       45:  142:      state->deck[i][j] = estate;
       45:  143:      state->deckCount[i]++;
       45:  144:    }
      240:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
      105:  147:      state->deck[i][j] = copper;
      105:  148:      state->deckCount[i]++;
      105:  149:    }
       15:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       42:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
       15:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:    return -1;
        -:  158:    }
       15:  159:  }
        -:  160:
        -:  161:  //draw player hands
       42:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {  
        -:  164:    //initialize hand size to zero
       15:  165:    state->handCount[i] = 0;
       15:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //{
        -:  170:    //  drawCard(i, state);
        -:  171:    //}
       15:  172:  }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      336:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
      162:  177:    state->embargoTokens[i] = 0;
      162:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
        6:  181:  state->outpostPlayed = 0;
        6:  182:  state->phase = 0;
        6:  183:  state->numActions = 1;
        6:  184:  state->numBuys = 1;
        6:  185:  state->playedCardCount = 0;
        6:  186:  state->whoseTurn = 0;
        6:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       72:  191:  for (it = 0; it < 5; it++){
       30:  192:    drawCard(state->whoseTurn, state);
       30:  193:  }
        -:  194:
        6:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        6:  197:  return 0;
        6:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       15:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       15:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
       15:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      330:  213:  while (state->deckCount[player] > 0) {
      150:  214:    card = floor(Random() * state->deckCount[player]);
      150:  215:    newDeck[newDeckPos] = state->deck[player][card];
      150:  216:    newDeckPos++;
     1098:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      399:  218:      state->deck[player][i] = state->deck[player][i+1];
      399:  219:    }
      150:  220:    state->deckCount[player]--;
        -:  221:  }
      330:  222:  for (i = 0; i < newDeckPos; i++) {
      150:  223:    state->deck[player][i] = newDeck[i];
      150:  224:    state->deckCount[player]++;
      150:  225:  }
        -:  226:
       15:  227:  return 0;
       15:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{
        -:  232:  int card;
        4:  233:  int coin_bonus = 0; //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
        4:  236:  if (state->phase != 0)
        -:  237:    {
        1:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
        3:  242:  if ( state->numActions < 1 )
        -:  243:  {
        1:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
        2:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
        3:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
        1:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
        1:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
        1:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
        1:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
        1:  268:  return 0;
        4:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        1:  288:    return -1;
        2:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        4:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
        2:  315:  int currentPlayer = whoseTurn(state);
        2:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
    #####:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
    #####:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
    #####:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
        3:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:      {
    #####:  405:        j++;
    #####:  406:      }
    #####:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    #####:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:      {
    #####:  468:        players[i] = -9999;
    #####:  469:      }
        -:  470:      else
        -:  471:      {
    #####:  472:        players[i] = scoreFor (i, state);
        -:  473:      }
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
    #####:  483:    }
    #####:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
    #####:  494:    }
    #####:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
    #####:  504:    }
    #####:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
    #####:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
    #####:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{
        -:  526:  int count;
        -:  527:  int deckCounter;
       33:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:  else{
       33:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       33:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       33:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       33:  575:    state->deckCount[player]--;
       33:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       33:  579:  return 0;
       33:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
       30:  584:  switch( cardNumber ) 
        -:  585:  {
        -:  586:    case curse:
        1:  587:      return 0;
        -:  588:    case estate:
        1:  589:      return 2;
        -:  590:    case duchy:
        1:  591:      return 5;
        -:  592:    case province:
        1:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
        1:  597:      return 3;
        -:  598:    case gold:
        1:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
        1:  603:      return 5;
        -:  604:    case feast:
        1:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
        1:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        4:  615:      return 3;
        -:  616:    case baron:
        1:  617:      return 4;
        -:  618:    case great_hall:
        1:  619:      return 3;
        -:  620:    case minion:
        1:  621:      return 5;
        -:  622:    case steward:
        1:  623:      return 3;
        -:  624:    case tribute:
        1:  625:      return 5;
        -:  626:    case ambassador:
        1:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo: 
        1:  631:      return 2;
        -:  632:    case outpost:
        1:  633:      return 5;
        -:  634:    case salvager:
        1:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
        1:  639:      return 4;
        -:  640:  }
        -:  641:
    #####:  642:  return -1;
       30:  643:}
        -:  644:
        -:  645:void playAdventurer( struct gameState * state, int currentPlayer, int * z, int * cardDrawn, int * drawntreasure, int * temphand)
        -:  646:{
    #####:  647:  while(*drawntreasure <2){
    #####:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:      shuffle(currentPlayer, state);
    #####:  650:    }
    #####:  651:    drawCard(currentPlayer, state);
    #####:  652:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  653:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
        -:  654:    //drawntreasure should be 1 or 2
    #####:  655:    *drawntreasure = *drawntreasure + 2;
        -:  656:    else{
    #####:  657:      temphand[*z]= *cardDrawn;
    #####:  658:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:      *z = *z + 1;
        -:  660:    }
        -:  661:  }
    #####:  662:  while(*z-1>=0){
    #####:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  664:    *z = *z-1;
        -:  665:  }
    #####:  666:}
        -:  667:void playSmithy( struct gameState * state, int currentPlayer, int handPos)
        -:  668:{
        -:  669:  //+3 Cards
        8:  670:  for (int i = 0; i < 3; i++)
        -:  671:  {
        3:  672:    drawCard(currentPlayer, state);
        3:  673:  }
        -:  674:  // shouldn't be here but gives player two more coins
        1:  675:  state->coins += 2;
        -:  676:  //discard card from hand
        1:  677:  discardCard(handPos, currentPlayer, state, 0);
        1:  678:}
        -:  679:void playVillage( struct gameState * state, int currentPlayer, int handPos)
        -:  680:{
        -:  681:  //+1 Card
    #####:  682:  drawCard(currentPlayer, state);
        -:  683:  // this line increased numbers of buys should not happen
    #####:  684:  state->numBuys++;//Increase buys by 1!
        -:  685:  //+2 Actions
    #####:  686:  state->numActions = state->numActions + 2;
        -:  687:  //discard played card from hand
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
    #####:  689:}
        -:  690:void playGreatHall( struct gameState * state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:        //+1 Card
    #####:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+1 Actions
        -:  696:      // should be 1 but I changed to two actions. A.P.
    #####:  697:      state->numActions = state->numActions + 2;
        -:  698:
        -:  699:      //discard card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:}
        -:  702:void playSteward( struct gameState * state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -:  703:{
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
        -:  707:    //should be +2 but I changed to 3 A.P.
    #####:  708:    drawCard(currentPlayer, state);
    #####:  709:    drawCard(currentPlayer, state);
    #####:  710:    drawCard(currentPlayer, state);
    #####:  711:  }
    #####:  712:  else if (choice1 == 2)
        -:  713:  {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
    #####:  716:  }
        -:  717:  else
        -:  718:  {
        -:  719:    //trash 2 cards in hand
    #####:  720:    discardCard(choice2, currentPlayer, state, 1);
    #####:  721:    discardCard(choice3, currentPlayer, state, 1);
        -:  722:  }
        -:  723:
        -:  724:  //discard card from hand
    #####:  725:  discardCard(handPos, currentPlayer, state, 0);
    #####:  726:}
        -:  727:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  728:{
        -:  729:  int i;
        -:  730:  int j;
        -:  731:  int k;
        -:  732:  int x;
        -:  733:  int index;
        1:  734:  int currentPlayer = whoseTurn(state);
        1:  735:  int nextPlayer = currentPlayer + 1;
        -:  736:
        1:  737:  int tributeRevealedCards[2] = {-1, -1};
        -:  738:  int temphand[MAX_HAND];// moved above the if statement
        1:  739:  int drawntreasure=0;
        -:  740:  int cardDrawn;
        1:  741:  int z = 0;// this is the counter for the temp hand
        1:  742:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  743:    nextPlayer = 0;
    #####:  744:  }
        -:  745:  
        -:  746:
        -:  747:  //uses switch to select card and perform actions
        1:  748:  switch( card ) 
        -:  749:    {
        -:  750:    case adventurer:
    #####:  751:      playAdventurer(state, currentPlayer, &z, & cardDrawn, & drawntreasure, temphand);
    #####:  752:      return 0;
        -:  753:
        -:  754:    case council_room:
        -:  755:      //+4 Cards
    #####:  756:      for (i = 0; i < 4; i++)
        -:  757:      {
    #####:  758:        drawCard(currentPlayer, state);
    #####:  759:      }
        -:  760:
        -:  761:      //+1 Buy
    #####:  762:      state->numBuys++;
        -:  763:
        -:  764:      //Each other player draws a card
    #####:  765:      for (i = 0; i < state->numPlayers; i++)
        -:  766:      {
    #####:  767:        if ( i != currentPlayer )
        -:  768:          {
    #####:  769:            drawCard(i, state);
    #####:  770:          }
    #####:  771:      }
        -:  772:
        -:  773:      //put played card in played card pile
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  782:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
    #####:  791:        if (supplyCount(choice1, state) <= 0){
        -:  792:          if (DEBUG)
        -:  793:            printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:          if (DEBUG){
        -:  796:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:          }
    #####:  798:        }
    #####:  799:        else if (state->coins < getCost(choice1)){
    #####:  800:          printf("That card is too expensive!\n");
        -:  801:
        -:  802:          if (DEBUG){
        -:  803:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:          }
    #####:  805:        }
        -:  806:        else{
        -:  807:
        -:  808:          if (DEBUG){
        -:  809:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:          }
        -:  811:
    #####:  812:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:          x = 0;//No more buying cards
        -:  814:
        -:  815:          if (DEBUG){
        -:  816:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:          }
        -:  818:
        -:  819:        }
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  824:state->hand[currentPlayer][i] = temphand[i];
    #####:  825:temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      
    #####:  829:      return 0;
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:      {
    #####:  839:        return -1;
        -:  840:      }
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:      {
    #####:  849:        return -1;
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);
    #####:  863:            break;
        -:  864:          }
    #####:  865:      }
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  884:      {
    #####:  885:        if (state->hand[currentPlayer][i] == j)
        -:  886:          {
    #####:  887:            discardCard(i, currentPlayer, state, 0);
    #####:  888:            break;
        -:  889:          }
    #####:  890:      }
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case smithy:
        1:  896:      playSmithy(state, currentPlayer, handPos);
        1:  897:      return 0;
        -:  898:
        -:  899:    case village:
    #####:  900:      playVillage(state, currentPlayer, handPos);
    #####:  901:      return 0;
        -:  902:
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:        int p = 0;//Iterator for hand!
    #####:  907:        int card_not_discarded = 1;//Flag for discard set!
    #####:  908:        while(card_not_discarded){
    #####:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:            state->discardCount[currentPlayer]++;
    #####:  913:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  915:            }
    #####:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:            state->handCount[currentPlayer]--;
    #####:  918:            card_not_discarded = 0;//Exit the loop
    #####:  919:          }
    #####:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
    #####:  925:            if (supplyCount(estate, state) > 0){
    #####:  926:              gainCard(estate, state, 0, currentPlayer);
    #####:  927:              state->supplyCount[estate]--;//Decrement estates
    #####:  928:              if (supplyCount(estate, state) == 0){
    #####:  929:        isGameOver(state);
    #####:  930:              }
    #####:  931:            }
    #####:  932:            card_not_discarded = 0;//Exit the loop
    #####:  933:          }
        -:  934:      
        -:  935:          else{
    #####:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
    #####:  939:      }
        -:  940:    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
    #####:  947:          }
    #####:  948:        }
        -:  949:      }
        -:  950:    
        -:  951:      
    #####:  952:      return 0;
        -:  953:
        -:  954:    case great_hall:
    #####:  955:      playGreatHall( state, currentPlayer, handPos);
    #####:  956:      return 0;
        -:  957:
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
    #####:  965:      if (choice1)//+2 coins
        -:  966:      {
    #####:  967:        state->coins = state->coins + 2;
    #####:  968:      }
        -:  969:
    #####:  970:      else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:      {
        -:  972:        //discard hand
    #####:  973:        while(numHandCards(state) > 0)
        -:  974:        {
    #####:  975:          discardCard(handPos, currentPlayer, state, 0);
        -:  976:        }
        -:  977:
        -:  978:        //draw 4
    #####:  979:        for (i = 0; i < 4; i++)
        -:  980:        {
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:
        -:  984:        //other players discard hand and redraw if hand size > 4
    #####:  985:        for (i = 0; i < state->numPlayers; i++)
        -:  986:        {
    #####:  987:          if (i != currentPlayer)
        -:  988:            {
    #####:  989:              if ( state->handCount[i] > 4 )
        -:  990:              {
        -:  991:                //discard hand
    #####:  992:                while( state->handCount[i] > 0 )
        -:  993:                {
    #####:  994:                  discardCard(handPos, i, state, 0);
        -:  995:                }
        -:  996:
        -:  997:                //draw 4
    #####:  998:                for (j = 0; j < 4; j++)
        -:  999:                {
    #####: 1000:                  drawCard(i, state);
    #####: 1001:                }
    #####: 1002:              }
    #####: 1003:            }
    #####: 1004:          }
        -: 1005:
    #####: 1006:      }
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:      playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:        if (state->deckCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:          state->deckCount[nextPlayer]--;
    #####: 1018:        }
    #####: 1019:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:          state->discardCount[nextPlayer]--;
    #####: 1022:        }
        -: 1023:        else{
        -: 1024:          //No Card to Reveal
        -: 1025:          if (DEBUG){
        -: 1026:            printf("No cards to reveal\n");
        -: 1027:          }
        -: 1028:        }
    #####: 1029:      }
        -: 1030:    
        -: 1031:      else{
    #####: 1032:        if (state->deckCount[nextPlayer] == 0){
    #####: 1033:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:            state->deckCount[nextPlayer]++;
    #####: 1036:            state->discard[nextPlayer][i] = -1;
    #####: 1037:            state->discardCount[nextPlayer]--;
    #####: 1038:          }
        -: 1039:    
    #####: 1040:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1041:        } 
    #####: 1042:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:        state->deckCount[nextPlayer]--;
    #####: 1045:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:        state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:        state->playedCardCount++;
    #####: 1053:        tributeRevealedCards[1] = -1;
    #####: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:          state->coins += 2;
    #####: 1059:        }
        -: 1060:            
    #####: 1061:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:          drawCard(currentPlayer, state);
    #####: 1063:          drawCard(currentPlayer, state);
    #####: 1064:        }
        -: 1065:        else{//Action Card
    #####: 1066:          state->numActions = state->numActions + 2;
        -: 1067:        }
    #####: 1068:      }
        -: 1069:    
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:      {
    #####: 1077:        return -1;
        -: 1078:      }
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:      {
    #####: 1082:        return -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:      {
    #####: 1087:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:          {
    #####: 1089:            j++;
    #####: 1090:          }
    #####: 1091:      }
    #####: 1092:      if (j < choice2)
        -: 1093:      {
    #####: 1094:        return -1;
        -: 1095:      }
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:      {
    #####: 1106:        if (i != currentPlayer)
        -: 1107:          {
    #####: 1108:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1109:          }
    #####: 1110:      }
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:      {
    #####: 1118:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:        {
    #####: 1120:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:          {
    #####: 1122:            discardCard(i, currentPlayer, state, 1);
    #####: 1123:            break;
        -: 1124:          }
    #####: 1125:        }
    #####: 1126:      }
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:      {
    #####: 1135:        if (i != currentPlayer)
        -: 1136:        {
    #####: 1137:          for (j = 0; j < state->handCount[i]; j++)
        -: 1138:          {
    #####: 1139:            if (state->hand[i][j] == copper)
        -: 1140:            {
    #####: 1141:              discardCard(j, i, state, 0);
    #####: 1142:              break;
        -: 1143:            }
    #####: 1144:            if (j == state->handCount[i])
        -: 1145:            {
    #####: 1146:              for (k = 0; k < state->handCount[i]; k++)
        -: 1147:              {
        -: 1148:                if (DEBUG)
        -: 1149:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1150:              }
    #####: 1151:              break;
        -: 1152:            }
    #####: 1153:          }
        -: 1154:
    #####: 1155:        }
        -: 1156:
    #####: 1157:      }
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:      {
    #####: 1172:        return -1;
        -: 1173:      }
        -: 1174:
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:
    #####: 1194:      if (choice1)
        -: 1195:      {
        -: 1196:        //gain coins equal to trashed card
    #####: 1197:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:        //trash card
    #####: 1199:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1200:      }
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:        if (i != currentPlayer){
    #####: 1209:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];    state->deckCount[i]--;
    #####: 1210:          state->discardCount[i]++;
    #####: 1211:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1212:        }
    #####: 1213:      }
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:      {
    #####: 1221:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:          {
    #####: 1223:            index = i;
    #####: 1224:            break;
        -: 1225:          }
    #####: 1226:      }
    #####: 1227:      if (index > -1)
        -: 1228:      {
        -: 1229:        //trash both treasure cards
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:        //gain 4 Gold cards
    #####: 1234:        for (i = 0; i < 4; i++)
        -: 1235:          {
    #####: 1236:            gainCard(gold, state, 1, currentPlayer);
    #####: 1237:          }
        -: 1238:
        -: 1239:        //return success
    #####: 1240:        return 1;
        -: 1241:      }
        -: 1242:
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:  return -1;
        1: 1248:}
        -: 1249:
        -: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:  //if card is not trashed, added to Played pile 
        1: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
        1: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1258:      state->playedCardCount++;
        1: 1259:    }
        -: 1260:
        -: 1261:  //set played card to -1
        1: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:  //remove card from player's hand
        1: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
    #####: 1269:    }
        1: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        -: 1275:  else 
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
        1: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
        1: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
        1: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
        1: 1285:  return 0;
        -: 1286:}
        -: 1287:
        -: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
        1: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
    #####: 1307:    }
        1: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
    #####: 1312:    }
        -: 1313:  else
        -: 1314:    {
        1: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:  //decrease number in supply pile
        1: 1320:  state->supplyCount[supplyPos]--;
        -: 1321: 
        1: 1322:  return 0;
        1: 1323:}
        -: 1324:
        -: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:
        -: 1329:  //reset coin count
        7: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
       88: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:  {
       37: 1335:    if (state->hand[player][i] == copper)
        -: 1336:    {
       34: 1337:      state->coins += 1;
       34: 1338:    }
        3: 1339:    else if (state->hand[player][i] == silver)
        -: 1340:    {
    #####: 1341:      state->coins += 2;
    #####: 1342:    }
        3: 1343:    else if (state->hand[player][i] == gold)
        -: 1344:    {
        1: 1345:      state->coins += 3;
        1: 1346:    }
       37: 1347:  }
        -: 1348:
        -: 1349:  //add bonus
        7: 1350:  state->coins += bonus;
        -: 1351:
        7: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
************************Testing Card: smithy ************
*********************Test One *********************
Does the player with smithy get three cards?
hand count = 7, expected = 7
deck count = 2, expected = 2
discard count = 0, expected = 1
********************************************************
Now I will test that the other players data has not changed
hand count = 0, expected = 0
deck count = 10, expected = 10
discard count = 0, expected = 0
I have checked the players' game state and the others' players game state.
Now, I will look at the game state that is shared.coins = 7, expected coins = 5
The coin assert failed due to the unequal number of coins.
I commented it out though so that the test suite could runnumActions = 1, expected actions = 1numPlayers = 2, expected = 2 
numBuys = 1, expected = 1 
********************************************************
Now I will check the kingdom and victory cards are as expected
This is the check of the kingdom cards
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
This is a check of the victory cards
estate : 8, expected: 8
duchy : 8, expected: 8
province : 8, expected: 8
******************************* Tests Done *****************
Passing Tests: 11
Failing Tests: 1
File 'dominion.c'
Lines executed:31.60% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      238:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      238:   11:  if (*(int*)a < *(int*)b)
       85:   12:    return -1;
      153:   13:  return 0;
      238:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
        7:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       14:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1540:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
     1330:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
      700:   65:      }
       70:   66:   } 
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        7:   72:  if (numPlayers == 2)
        -:   73:    {
        5:   74:      state->supplyCount[curse] = 10;
        5:   75:    }
        2:   76:  else if (numPlayers == 3)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 20;
        1:   79:    }
        -:   80:  else
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        7:   86:  if (numPlayers == 2)
        -:   87:    {
        5:   88:      state->supplyCount[estate] = 8;
        5:   89:      state->supplyCount[duchy] = 8;
        5:   90:      state->supplyCount[province] = 8;
        5:   91:    }
        -:   92:  else
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 12;
        2:   95:      state->supplyCount[duchy] = 12;
        2:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        7:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  101:  state->supplyCount[silver] = 40;
        7:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      294:  105:  for (i = adventurer; i <= treasure_map; i++)       //loop all cards
        -:  106:  {
     2310:  107:    for (j = 0; j < 10; j++)           //loop chosen cards
        -:  108:    {
     1085:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
      140:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
    #####:  114:          if (numPlayers == 2){ 
    #####:  115:            state->supplyCount[i] = 8; 
    #####:  116:          }
    #####:  117:          else{ state->supplyCount[i] = 12; }
    #####:  118:        }
        -:  119:        else
        -:  120:        {
       70:  121:          state->supplyCount[i] = 10;
        -:  122:        }
       70:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:        {
     1015:  127:          state->supplyCount[i] = -1;
        -:  128:        }
     1015:  129:    }
        -:  130:
      140:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       48:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
       17:  139:    state->deckCount[i] = 0;
      136:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       51:  142:      state->deck[i][j] = estate;
       51:  143:      state->deckCount[i]++;
       51:  144:    }
      272:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
      119:  147:      state->deck[i][j] = copper;
      119:  148:      state->deckCount[i]++;
      119:  149:    }
       17:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       48:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
       17:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:    return -1;
        -:  158:    }
       17:  159:  }
        -:  160:
        -:  161:  //draw player hands
       48:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {  
        -:  164:    //initialize hand size to zero
       17:  165:    state->handCount[i] = 0;
       17:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //{
        -:  170:    //  drawCard(i, state);
        -:  171:    //}
       17:  172:  }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      392:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
      189:  177:    state->embargoTokens[i] = 0;
      189:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
        7:  181:  state->outpostPlayed = 0;
        7:  182:  state->phase = 0;
        7:  183:  state->numActions = 1;
        7:  184:  state->numBuys = 1;
        7:  185:  state->playedCardCount = 0;
        7:  186:  state->whoseTurn = 0;
        7:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       84:  191:  for (it = 0; it < 5; it++){
       35:  192:    drawCard(state->whoseTurn, state);
       35:  193:  }
        -:  194:
        7:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        7:  197:  return 0;
        7:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       17:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       17:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
       17:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      374:  213:  while (state->deckCount[player] > 0) {
      170:  214:    card = floor(Random() * state->deckCount[player]);
      170:  215:    newDeck[newDeckPos] = state->deck[player][card];
      170:  216:    newDeckPos++;
     1246:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      453:  218:      state->deck[player][i] = state->deck[player][i+1];
      453:  219:    }
      170:  220:    state->deckCount[player]--;
        -:  221:  }
      374:  222:  for (i = 0; i < newDeckPos; i++) {
      170:  223:    state->deck[player][i] = newDeck[i];
      170:  224:    state->deckCount[player]++;
      170:  225:  }
        -:  226:
       17:  227:  return 0;
       17:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{
        -:  232:  int card;
        4:  233:  int coin_bonus = 0; //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
        4:  236:  if (state->phase != 0)
        -:  237:    {
        1:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
        3:  242:  if ( state->numActions < 1 )
        -:  243:  {
        1:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
        2:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
        3:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
        1:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
        1:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
        1:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
        1:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
        1:  268:  return 0;
        4:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        1:  288:    return -1;
        2:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        4:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
        2:  315:  int currentPlayer = whoseTurn(state);
        2:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
    #####:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
    #####:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
    #####:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
        4:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:      {
    #####:  405:        j++;
    #####:  406:      }
    #####:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    #####:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:      {
    #####:  468:        players[i] = -9999;
    #####:  469:      }
        -:  470:      else
        -:  471:      {
    #####:  472:        players[i] = scoreFor (i, state);
        -:  473:      }
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
    #####:  483:    }
    #####:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
    #####:  494:    }
    #####:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
    #####:  504:    }
    #####:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
    #####:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
    #####:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{
        -:  526:  int count;
        -:  527:  int deckCounter;
       41:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:  else{
       41:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       41:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       41:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       41:  575:    state->deckCount[player]--;
       41:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       41:  579:  return 0;
       41:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
       30:  584:  switch( cardNumber ) 
        -:  585:  {
        -:  586:    case curse:
        1:  587:      return 0;
        -:  588:    case estate:
        1:  589:      return 2;
        -:  590:    case duchy:
        1:  591:      return 5;
        -:  592:    case province:
        1:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
        1:  597:      return 3;
        -:  598:    case gold:
        1:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
        1:  603:      return 5;
        -:  604:    case feast:
        1:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
        1:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        4:  615:      return 3;
        -:  616:    case baron:
        1:  617:      return 4;
        -:  618:    case great_hall:
        1:  619:      return 3;
        -:  620:    case minion:
        1:  621:      return 5;
        -:  622:    case steward:
        1:  623:      return 3;
        -:  624:    case tribute:
        1:  625:      return 5;
        -:  626:    case ambassador:
        1:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo: 
        1:  631:      return 2;
        -:  632:    case outpost:
        1:  633:      return 5;
        -:  634:    case salvager:
        1:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
        1:  639:      return 4;
        -:  640:  }
        -:  641:
    #####:  642:  return -1;
       30:  643:}
        -:  644:
        -:  645:void playAdventurer( struct gameState * state, int currentPlayer, int * z, int * cardDrawn, int * drawntreasure, int * temphand)
        -:  646:{
    #####:  647:  while(*drawntreasure <2){
    #####:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:      shuffle(currentPlayer, state);
    #####:  650:    }
    #####:  651:    drawCard(currentPlayer, state);
    #####:  652:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  653:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
        -:  654:    //drawntreasure should be 1 or 2
    #####:  655:    *drawntreasure = *drawntreasure + 2;
        -:  656:    else{
    #####:  657:      temphand[*z]= *cardDrawn;
    #####:  658:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  659:      *z = *z + 1;
        -:  660:    }
        -:  661:  }
    #####:  662:  while(*z-1>=0){
    #####:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
    #####:  664:    *z = *z-1;
        -:  665:  }
    #####:  666:}
        -:  667:void playSmithy( struct gameState * state, int currentPlayer, int handPos)
        -:  668:{
        -:  669:  //+3 Cards
       16:  670:  for (int i = 0; i < 3; i++)
        -:  671:  {
        6:  672:    drawCard(currentPlayer, state);
        6:  673:  }
        -:  674:  // shouldn't be here but gives player two more coins
        2:  675:  state->coins += 2;
        -:  676:  //discard card from hand
        2:  677:  discardCard(handPos, currentPlayer, state, 0);
        2:  678:}
        -:  679:void playVillage( struct gameState * state, int currentPlayer, int handPos)
        -:  680:{
        -:  681:  //+1 Card
    #####:  682:  drawCard(currentPlayer, state);
        -:  683:  // this line increased numbers of buys should not happen
    #####:  684:  state->numBuys++;//Increase buys by 1!
        -:  685:  //+2 Actions
    #####:  686:  state->numActions = state->numActions + 2;
        -:  687:  //discard played card from hand
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
    #####:  689:}
        -:  690:void playGreatHall( struct gameState * state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:        //+1 Card
    #####:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+1 Actions
        -:  696:      // should be 1 but I changed to two actions. A.P.
    #####:  697:      state->numActions = state->numActions + 2;
        -:  698:
        -:  699:      //discard card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:}
        -:  702:void playSteward( struct gameState * state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -:  703:{
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
        -:  707:    //should be +2 but I changed to 3 A.P.
    #####:  708:    drawCard(currentPlayer, state);
    #####:  709:    drawCard(currentPlayer, state);
    #####:  710:    drawCard(currentPlayer, state);
    #####:  711:  }
    #####:  712:  else if (choice1 == 2)
        -:  713:  {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
    #####:  716:  }
        -:  717:  else
        -:  718:  {
        -:  719:    //trash 2 cards in hand
    #####:  720:    discardCard(choice2, currentPlayer, state, 1);
    #####:  721:    discardCard(choice3, currentPlayer, state, 1);
        -:  722:  }
        -:  723:
        -:  724:  //discard card from hand
    #####:  725:  discardCard(handPos, currentPlayer, state, 0);
    #####:  726:}
        -:  727:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  728:{
        -:  729:  int i;
        -:  730:  int j;
        -:  731:  int k;
        -:  732:  int x;
        -:  733:  int index;
        2:  734:  int currentPlayer = whoseTurn(state);
        2:  735:  int nextPlayer = currentPlayer + 1;
        -:  736:
        2:  737:  int tributeRevealedCards[2] = {-1, -1};
        -:  738:  int temphand[MAX_HAND];// moved above the if statement
        2:  739:  int drawntreasure=0;
        -:  740:  int cardDrawn;
        2:  741:  int z = 0;// this is the counter for the temp hand
        2:  742:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  743:    nextPlayer = 0;
    #####:  744:  }
        -:  745:  
        -:  746:
        -:  747:  //uses switch to select card and perform actions
        2:  748:  switch( card ) 
        -:  749:    {
        -:  750:    case adventurer:
    #####:  751:      playAdventurer(state, currentPlayer, &z, & cardDrawn, & drawntreasure, temphand);
    #####:  752:      return 0;
        -:  753:
        -:  754:    case council_room:
        -:  755:      //+4 Cards
    #####:  756:      for (i = 0; i < 4; i++)
        -:  757:      {
    #####:  758:        drawCard(currentPlayer, state);
    #####:  759:      }
        -:  760:
        -:  761:      //+1 Buy
    #####:  762:      state->numBuys++;
        -:  763:
        -:  764:      //Each other player draws a card
    #####:  765:      for (i = 0; i < state->numPlayers; i++)
        -:  766:      {
    #####:  767:        if ( i != currentPlayer )
        -:  768:          {
    #####:  769:            drawCard(i, state);
    #####:  770:          }
    #####:  771:      }
        -:  772:
        -:  773:      //put played card in played card pile
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  782:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
    #####:  791:        if (supplyCount(choice1, state) <= 0){
        -:  792:          if (DEBUG)
        -:  793:            printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:          if (DEBUG){
        -:  796:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:          }
    #####:  798:        }
    #####:  799:        else if (state->coins < getCost(choice1)){
    #####:  800:          printf("That card is too expensive!\n");
        -:  801:
        -:  802:          if (DEBUG){
        -:  803:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:          }
    #####:  805:        }
        -:  806:        else{
        -:  807:
        -:  808:          if (DEBUG){
        -:  809:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:          }
        -:  811:
    #####:  812:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:          x = 0;//No more buying cards
        -:  814:
        -:  815:          if (DEBUG){
        -:  816:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:          }
        -:  818:
        -:  819:        }
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  824:state->hand[currentPlayer][i] = temphand[i];
    #####:  825:temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      
    #####:  829:      return 0;
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:      {
    #####:  839:        return -1;
        -:  840:      }
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:      {
    #####:  849:        return -1;
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);
    #####:  863:            break;
        -:  864:          }
    #####:  865:      }
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  884:      {
    #####:  885:        if (state->hand[currentPlayer][i] == j)
        -:  886:          {
    #####:  887:            discardCard(i, currentPlayer, state, 0);
    #####:  888:            break;
        -:  889:          }
    #####:  890:      }
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case smithy:
        2:  896:      playSmithy(state, currentPlayer, handPos);
        2:  897:      return 0;
        -:  898:
        -:  899:    case village:
    #####:  900:      playVillage(state, currentPlayer, handPos);
    #####:  901:      return 0;
        -:  902:
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:        int p = 0;//Iterator for hand!
    #####:  907:        int card_not_discarded = 1;//Flag for discard set!
    #####:  908:        while(card_not_discarded){
    #####:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:            state->discardCount[currentPlayer]++;
    #####:  913:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  915:            }
    #####:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:            state->handCount[currentPlayer]--;
    #####:  918:            card_not_discarded = 0;//Exit the loop
    #####:  919:          }
    #####:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
    #####:  925:            if (supplyCount(estate, state) > 0){
    #####:  926:              gainCard(estate, state, 0, currentPlayer);
    #####:  927:              state->supplyCount[estate]--;//Decrement estates
    #####:  928:              if (supplyCount(estate, state) == 0){
    #####:  929:        isGameOver(state);
    #####:  930:              }
    #####:  931:            }
    #####:  932:            card_not_discarded = 0;//Exit the loop
    #####:  933:          }
        -:  934:      
        -:  935:          else{
    #####:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
    #####:  939:      }
        -:  940:    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
    #####:  947:          }
    #####:  948:        }
        -:  949:      }
        -:  950:    
        -:  951:      
    #####:  952:      return 0;
        -:  953:
        -:  954:    case great_hall:
    #####:  955:      playGreatHall( state, currentPlayer, handPos);
    #####:  956:      return 0;
        -:  957:
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
    #####:  965:      if (choice1)//+2 coins
        -:  966:      {
    #####:  967:        state->coins = state->coins + 2;
    #####:  968:      }
        -:  969:
    #####:  970:      else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:      {
        -:  972:        //discard hand
    #####:  973:        while(numHandCards(state) > 0)
        -:  974:        {
    #####:  975:          discardCard(handPos, currentPlayer, state, 0);
        -:  976:        }
        -:  977:
        -:  978:        //draw 4
    #####:  979:        for (i = 0; i < 4; i++)
        -:  980:        {
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:
        -:  984:        //other players discard hand and redraw if hand size > 4
    #####:  985:        for (i = 0; i < state->numPlayers; i++)
        -:  986:        {
    #####:  987:          if (i != currentPlayer)
        -:  988:            {
    #####:  989:              if ( state->handCount[i] > 4 )
        -:  990:              {
        -:  991:                //discard hand
    #####:  992:                while( state->handCount[i] > 0 )
        -:  993:                {
    #####:  994:                  discardCard(handPos, i, state, 0);
        -:  995:                }
        -:  996:
        -:  997:                //draw 4
    #####:  998:                for (j = 0; j < 4; j++)
        -:  999:                {
    #####: 1000:                  drawCard(i, state);
    #####: 1001:                }
    #####: 1002:              }
    #####: 1003:            }
    #####: 1004:          }
        -: 1005:
    #####: 1006:      }
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:      playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:        if (state->deckCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:          state->deckCount[nextPlayer]--;
    #####: 1018:        }
    #####: 1019:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:          state->discardCount[nextPlayer]--;
    #####: 1022:        }
        -: 1023:        else{
        -: 1024:          //No Card to Reveal
        -: 1025:          if (DEBUG){
        -: 1026:            printf("No cards to reveal\n");
        -: 1027:          }
        -: 1028:        }
    #####: 1029:      }
        -: 1030:    
        -: 1031:      else{
    #####: 1032:        if (state->deckCount[nextPlayer] == 0){
    #####: 1033:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:            state->deckCount[nextPlayer]++;
    #####: 1036:            state->discard[nextPlayer][i] = -1;
    #####: 1037:            state->discardCount[nextPlayer]--;
    #####: 1038:          }
        -: 1039:    
    #####: 1040:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1041:        } 
    #####: 1042:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:        state->deckCount[nextPlayer]--;
    #####: 1045:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:        state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:        state->playedCardCount++;
    #####: 1053:        tributeRevealedCards[1] = -1;
    #####: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:          state->coins += 2;
    #####: 1059:        }
        -: 1060:            
    #####: 1061:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:          drawCard(currentPlayer, state);
    #####: 1063:          drawCard(currentPlayer, state);
    #####: 1064:        }
        -: 1065:        else{//Action Card
    #####: 1066:          state->numActions = state->numActions + 2;
        -: 1067:        }
    #####: 1068:      }
        -: 1069:    
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:      {
    #####: 1077:        return -1;
        -: 1078:      }
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:      {
    #####: 1082:        return -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:      {
    #####: 1087:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:          {
    #####: 1089:            j++;
    #####: 1090:          }
    #####: 1091:      }
    #####: 1092:      if (j < choice2)
        -: 1093:      {
    #####: 1094:        return -1;
        -: 1095:      }
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:      {
    #####: 1106:        if (i != currentPlayer)
        -: 1107:          {
    #####: 1108:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1109:          }
    #####: 1110:      }
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:      {
    #####: 1118:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:        {
    #####: 1120:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:          {
    #####: 1122:            discardCard(i, currentPlayer, state, 1);
    #####: 1123:            break;
        -: 1124:          }
    #####: 1125:        }
    #####: 1126:      }
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:      {
    #####: 1135:        if (i != currentPlayer)
        -: 1136:        {
    #####: 1137:          for (j = 0; j < state->handCount[i]; j++)
        -: 1138:          {
    #####: 1139:            if (state->hand[i][j] == copper)
        -: 1140:            {
    #####: 1141:              discardCard(j, i, state, 0);
    #####: 1142:              break;
        -: 1143:            }
    #####: 1144:            if (j == state->handCount[i])
        -: 1145:            {
    #####: 1146:              for (k = 0; k < state->handCount[i]; k++)
        -: 1147:              {
        -: 1148:                if (DEBUG)
        -: 1149:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1150:              }
    #####: 1151:              break;
        -: 1152:            }
    #####: 1153:          }
        -: 1154:
    #####: 1155:        }
        -: 1156:
    #####: 1157:      }
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:      {
    #####: 1172:        return -1;
        -: 1173:      }
        -: 1174:
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:
    #####: 1194:      if (choice1)
        -: 1195:      {
        -: 1196:        //gain coins equal to trashed card
    #####: 1197:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:        //trash card
    #####: 1199:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1200:      }
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:        if (i != currentPlayer){
    #####: 1209:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];    state->deckCount[i]--;
    #####: 1210:          state->discardCount[i]++;
    #####: 1211:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1212:        }
    #####: 1213:      }
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:      {
    #####: 1221:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:          {
    #####: 1223:            index = i;
    #####: 1224:            break;
        -: 1225:          }
    #####: 1226:      }
    #####: 1227:      if (index > -1)
        -: 1228:      {
        -: 1229:        //trash both treasure cards
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:        //gain 4 Gold cards
    #####: 1234:        for (i = 0; i < 4; i++)
        -: 1235:          {
    #####: 1236:            gainCard(gold, state, 1, currentPlayer);
    #####: 1237:          }
        -: 1238:
        -: 1239:        //return success
    #####: 1240:        return 1;
        -: 1241:      }
        -: 1242:
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:  return -1;
        2: 1248:}
        -: 1249:
        -: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:  //if card is not trashed, added to Played pile 
        2: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
        2: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1258:      state->playedCardCount++;
        2: 1259:    }
        -: 1260:
        -: 1261:  //set played card to -1
        2: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:  //remove card from player's hand
        2: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
    #####: 1269:    }
        2: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        -: 1275:  else 
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
        2: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
        2: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
        2: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
        2: 1285:  return 0;
        -: 1286:}
        -: 1287:
        -: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
        1: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
    #####: 1307:    }
        1: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
    #####: 1312:    }
        -: 1313:  else
        -: 1314:    {
        1: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:  //decrease number in supply pile
        1: 1320:  state->supplyCount[supplyPos]--;
        -: 1321: 
        1: 1322:  return 0;
        1: 1323:}
        -: 1324:
        -: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:
        -: 1329:  //reset coin count
        8: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
      100: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:  {
       42: 1335:    if (state->hand[player][i] == copper)
        -: 1336:    {
       39: 1337:      state->coins += 1;
       39: 1338:    }
        3: 1339:    else if (state->hand[player][i] == silver)
        -: 1340:    {
    #####: 1341:      state->coins += 2;
    #####: 1342:    }
        3: 1343:    else if (state->hand[player][i] == gold)
        -: 1344:    {
        1: 1345:      state->coins += 3;
        1: 1346:    }
       42: 1347:  }
        -: 1348:
        -: 1349:  //add bonus
        8: 1350:  state->coins += bonus;
        -: 1351:
        8: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
************************Testing Card: adventurer ************
*********************Test One *********************
number of treasure should be at least two, actual: 5
********************************************************
Now I will test that the other players data has not changed
hand count = 0, expected = 0
deck count = 10, expected = 10
discard count = 0, expected = 0
I have checked the players' game state and the others' players game state.
Now, I will look at the game state that is shared.coins = 5, expected coins = 5
numActions = 1, expected actions = 1numPlayers = 2, expected = 2 
numBuys = 1, expected = 1 
********************************************************
Now I will check the kingdom and victory cards are as expected
This is the check of the kingdom cards
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
This is a check of the victory cards
estate : 8, expected: 8
duchy : 8, expected: 8
province : 8, expected: 8
******************************* Tests Done *****************
Passing Tests: 10
Failing Tests: 0
File 'dominion.c'
Lines executed:33.90% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      266:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      266:   11:  if (*(int*)a < *(int*)b)
       95:   12:    return -1;
      171:   13:  return 0;
      266:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       16:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      176:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1760:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
     1520:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
      800:   65:      }
       80:   66:   } 
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        8:   72:  if (numPlayers == 2)
        -:   73:    {
        6:   74:      state->supplyCount[curse] = 10;
        6:   75:    }
        2:   76:  else if (numPlayers == 3)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 20;
        1:   79:    }
        -:   80:  else
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        8:   86:  if (numPlayers == 2)
        -:   87:    {
        6:   88:      state->supplyCount[estate] = 8;
        6:   89:      state->supplyCount[duchy] = 8;
        6:   90:      state->supplyCount[province] = 8;
        6:   91:    }
        -:   92:  else
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 12;
        2:   95:      state->supplyCount[duchy] = 12;
        2:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        8:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  101:  state->supplyCount[silver] = 40;
        8:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      336:  105:  for (i = adventurer; i <= treasure_map; i++)       //loop all cards
        -:  106:  {
     2640:  107:    for (j = 0; j < 10; j++)           //loop chosen cards
        -:  108:    {
     1240:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
      160:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
    #####:  114:          if (numPlayers == 2){ 
    #####:  115:            state->supplyCount[i] = 8; 
    #####:  116:          }
    #####:  117:          else{ state->supplyCount[i] = 12; }
    #####:  118:        }
        -:  119:        else
        -:  120:        {
       80:  121:          state->supplyCount[i] = 10;
        -:  122:        }
       80:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:        {
     1160:  127:          state->supplyCount[i] = -1;
        -:  128:        }
     1160:  129:    }
        -:  130:
      160:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       54:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
       19:  139:    state->deckCount[i] = 0;
      152:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       57:  142:      state->deck[i][j] = estate;
       57:  143:      state->deckCount[i]++;
       57:  144:    }
      304:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
      133:  147:      state->deck[i][j] = copper;
      133:  148:      state->deckCount[i]++;
      133:  149:    }
       19:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       54:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
       19:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:    return -1;
        -:  158:    }
       19:  159:  }
        -:  160:
        -:  161:  //draw player hands
       54:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {  
        -:  164:    //initialize hand size to zero
       19:  165:    state->handCount[i] = 0;
       19:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //{
        -:  170:    //  drawCard(i, state);
        -:  171:    //}
       19:  172:  }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      448:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
      216:  177:    state->embargoTokens[i] = 0;
      216:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
        8:  181:  state->outpostPlayed = 0;
        8:  182:  state->phase = 0;
        8:  183:  state->numActions = 1;
        8:  184:  state->numBuys = 1;
        8:  185:  state->playedCardCount = 0;
        8:  186:  state->whoseTurn = 0;
        8:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       96:  191:  for (it = 0; it < 5; it++){
       40:  192:    drawCard(state->whoseTurn, state);
       40:  193:  }
        -:  194:
        8:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        8:  197:  return 0;
        8:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       19:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       19:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
       19:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      418:  213:  while (state->deckCount[player] > 0) {
      190:  214:    card = floor(Random() * state->deckCount[player]);
      190:  215:    newDeck[newDeckPos] = state->deck[player][card];
      190:  216:    newDeckPos++;
     1394:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      507:  218:      state->deck[player][i] = state->deck[player][i+1];
      507:  219:    }
      190:  220:    state->deckCount[player]--;
        -:  221:  }
      418:  222:  for (i = 0; i < newDeckPos; i++) {
      190:  223:    state->deck[player][i] = newDeck[i];
      190:  224:    state->deckCount[player]++;
      190:  225:  }
        -:  226:
       19:  227:  return 0;
       19:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{
        -:  232:  int card;
        4:  233:  int coin_bonus = 0; //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
        4:  236:  if (state->phase != 0)
        -:  237:    {
        1:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
        3:  242:  if ( state->numActions < 1 )
        -:  243:  {
        1:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
        2:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
        3:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
        1:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
        1:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
        1:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
        1:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
        1:  268:  return 0;
        4:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        1:  288:    return -1;
        2:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        4:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
        2:  315:  int currentPlayer = whoseTurn(state);
        2:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
    #####:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
    #####:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
    #####:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
        5:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:      {
    #####:  405:        j++;
    #####:  406:      }
    #####:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    #####:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:      {
    #####:  468:        players[i] = -9999;
    #####:  469:      }
        -:  470:      else
        -:  471:      {
    #####:  472:        players[i] = scoreFor (i, state);
        -:  473:      }
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
    #####:  483:    }
    #####:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
    #####:  494:    }
    #####:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
    #####:  504:    }
    #####:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
    #####:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
    #####:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{
        -:  526:  int count;
        -:  527:  int deckCounter;
       48:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:  else{
       48:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       48:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       48:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       48:  575:    state->deckCount[player]--;
       48:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       48:  579:  return 0;
       48:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
       30:  584:  switch( cardNumber ) 
        -:  585:  {
        -:  586:    case curse:
        1:  587:      return 0;
        -:  588:    case estate:
        1:  589:      return 2;
        -:  590:    case duchy:
        1:  591:      return 5;
        -:  592:    case province:
        1:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
        1:  597:      return 3;
        -:  598:    case gold:
        1:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
        1:  603:      return 5;
        -:  604:    case feast:
        1:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
        1:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        4:  615:      return 3;
        -:  616:    case baron:
        1:  617:      return 4;
        -:  618:    case great_hall:
        1:  619:      return 3;
        -:  620:    case minion:
        1:  621:      return 5;
        -:  622:    case steward:
        1:  623:      return 3;
        -:  624:    case tribute:
        1:  625:      return 5;
        -:  626:    case ambassador:
        1:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo: 
        1:  631:      return 2;
        -:  632:    case outpost:
        1:  633:      return 5;
        -:  634:    case salvager:
        1:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
        1:  639:      return 4;
        -:  640:  }
        -:  641:
    #####:  642:  return -1;
       30:  643:}
        -:  644:
        -:  645:void playAdventurer( struct gameState * state, int currentPlayer, int * z, int * cardDrawn, int * drawntreasure, int * temphand)
        -:  646:{
        6:  647:  while(*drawntreasure <2){
        2:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:      shuffle(currentPlayer, state);
    #####:  650:    }
        2:  651:    drawCard(currentPlayer, state);
        2:  652:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  653:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
        -:  654:    //drawntreasure should be 1 or 2
        1:  655:    *drawntreasure = *drawntreasure + 2;
        -:  656:    else{
        1:  657:      temphand[*z]= *cardDrawn;
        1:  658:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  659:      *z = *z + 1;
        -:  660:    }
        -:  661:  }
        4:  662:  while(*z-1>=0){
        1:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
        1:  664:    *z = *z-1;
        -:  665:  }
        1:  666:}
        -:  667:void playSmithy( struct gameState * state, int currentPlayer, int handPos)
        -:  668:{
        -:  669:  //+3 Cards
       16:  670:  for (int i = 0; i < 3; i++)
        -:  671:  {
        6:  672:    drawCard(currentPlayer, state);
        6:  673:  }
        -:  674:  // shouldn't be here but gives player two more coins
        2:  675:  state->coins += 2;
        -:  676:  //discard card from hand
        2:  677:  discardCard(handPos, currentPlayer, state, 0);
        2:  678:}
        -:  679:void playVillage( struct gameState * state, int currentPlayer, int handPos)
        -:  680:{
        -:  681:  //+1 Card
    #####:  682:  drawCard(currentPlayer, state);
        -:  683:  // this line increased numbers of buys should not happen
    #####:  684:  state->numBuys++;//Increase buys by 1!
        -:  685:  //+2 Actions
    #####:  686:  state->numActions = state->numActions + 2;
        -:  687:  //discard played card from hand
    #####:  688:  discardCard(handPos, currentPlayer, state, 0);
    #####:  689:}
        -:  690:void playGreatHall( struct gameState * state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:        //+1 Card
    #####:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+1 Actions
        -:  696:      // should be 1 but I changed to two actions. A.P.
    #####:  697:      state->numActions = state->numActions + 2;
        -:  698:
        -:  699:      //discard card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:}
        -:  702:void playSteward( struct gameState * state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -:  703:{
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
        -:  707:    //should be +2 but I changed to 3 A.P.
    #####:  708:    drawCard(currentPlayer, state);
    #####:  709:    drawCard(currentPlayer, state);
    #####:  710:    drawCard(currentPlayer, state);
    #####:  711:  }
    #####:  712:  else if (choice1 == 2)
        -:  713:  {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
    #####:  716:  }
        -:  717:  else
        -:  718:  {
        -:  719:    //trash 2 cards in hand
    #####:  720:    discardCard(choice2, currentPlayer, state, 1);
    #####:  721:    discardCard(choice3, currentPlayer, state, 1);
        -:  722:  }
        -:  723:
        -:  724:  //discard card from hand
    #####:  725:  discardCard(handPos, currentPlayer, state, 0);
    #####:  726:}
        -:  727:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  728:{
        -:  729:  int i;
        -:  730:  int j;
        -:  731:  int k;
        -:  732:  int x;
        -:  733:  int index;
        3:  734:  int currentPlayer = whoseTurn(state);
        3:  735:  int nextPlayer = currentPlayer + 1;
        -:  736:
        3:  737:  int tributeRevealedCards[2] = {-1, -1};
        -:  738:  int temphand[MAX_HAND];// moved above the if statement
        3:  739:  int drawntreasure=0;
        -:  740:  int cardDrawn;
        3:  741:  int z = 0;// this is the counter for the temp hand
        3:  742:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  743:    nextPlayer = 0;
    #####:  744:  }
        -:  745:  
        -:  746:
        -:  747:  //uses switch to select card and perform actions
        3:  748:  switch( card ) 
        -:  749:    {
        -:  750:    case adventurer:
        1:  751:      playAdventurer(state, currentPlayer, &z, & cardDrawn, & drawntreasure, temphand);
        1:  752:      return 0;
        -:  753:
        -:  754:    case council_room:
        -:  755:      //+4 Cards
    #####:  756:      for (i = 0; i < 4; i++)
        -:  757:      {
    #####:  758:        drawCard(currentPlayer, state);
    #####:  759:      }
        -:  760:
        -:  761:      //+1 Buy
    #####:  762:      state->numBuys++;
        -:  763:
        -:  764:      //Each other player draws a card
    #####:  765:      for (i = 0; i < state->numPlayers; i++)
        -:  766:      {
    #####:  767:        if ( i != currentPlayer )
        -:  768:          {
    #####:  769:            drawCard(i, state);
    #####:  770:          }
    #####:  771:      }
        -:  772:
        -:  773:      //put played card in played card pile
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  782:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
    #####:  791:        if (supplyCount(choice1, state) <= 0){
        -:  792:          if (DEBUG)
        -:  793:            printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:          if (DEBUG){
        -:  796:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:          }
    #####:  798:        }
    #####:  799:        else if (state->coins < getCost(choice1)){
    #####:  800:          printf("That card is too expensive!\n");
        -:  801:
        -:  802:          if (DEBUG){
        -:  803:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:          }
    #####:  805:        }
        -:  806:        else{
        -:  807:
        -:  808:          if (DEBUG){
        -:  809:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:          }
        -:  811:
    #####:  812:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:          x = 0;//No more buying cards
        -:  814:
        -:  815:          if (DEBUG){
        -:  816:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:          }
        -:  818:
        -:  819:        }
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  824:state->hand[currentPlayer][i] = temphand[i];
    #####:  825:temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      
    #####:  829:      return 0;
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:      {
    #####:  839:        return -1;
        -:  840:      }
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:      {
    #####:  849:        return -1;
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);
    #####:  863:            break;
        -:  864:          }
    #####:  865:      }
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  884:      {
    #####:  885:        if (state->hand[currentPlayer][i] == j)
        -:  886:          {
    #####:  887:            discardCard(i, currentPlayer, state, 0);
    #####:  888:            break;
        -:  889:          }
    #####:  890:      }
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case smithy:
        2:  896:      playSmithy(state, currentPlayer, handPos);
        2:  897:      return 0;
        -:  898:
        -:  899:    case village:
    #####:  900:      playVillage(state, currentPlayer, handPos);
    #####:  901:      return 0;
        -:  902:
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:        int p = 0;//Iterator for hand!
    #####:  907:        int card_not_discarded = 1;//Flag for discard set!
    #####:  908:        while(card_not_discarded){
    #####:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:            state->discardCount[currentPlayer]++;
    #####:  913:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  915:            }
    #####:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:            state->handCount[currentPlayer]--;
    #####:  918:            card_not_discarded = 0;//Exit the loop
    #####:  919:          }
    #####:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
    #####:  925:            if (supplyCount(estate, state) > 0){
    #####:  926:              gainCard(estate, state, 0, currentPlayer);
    #####:  927:              state->supplyCount[estate]--;//Decrement estates
    #####:  928:              if (supplyCount(estate, state) == 0){
    #####:  929:        isGameOver(state);
    #####:  930:              }
    #####:  931:            }
    #####:  932:            card_not_discarded = 0;//Exit the loop
    #####:  933:          }
        -:  934:      
        -:  935:          else{
    #####:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
    #####:  939:      }
        -:  940:    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
    #####:  947:          }
    #####:  948:        }
        -:  949:      }
        -:  950:    
        -:  951:      
    #####:  952:      return 0;
        -:  953:
        -:  954:    case great_hall:
    #####:  955:      playGreatHall( state, currentPlayer, handPos);
    #####:  956:      return 0;
        -:  957:
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
    #####:  965:      if (choice1)//+2 coins
        -:  966:      {
    #####:  967:        state->coins = state->coins + 2;
    #####:  968:      }
        -:  969:
    #####:  970:      else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:      {
        -:  972:        //discard hand
    #####:  973:        while(numHandCards(state) > 0)
        -:  974:        {
    #####:  975:          discardCard(handPos, currentPlayer, state, 0);
        -:  976:        }
        -:  977:
        -:  978:        //draw 4
    #####:  979:        for (i = 0; i < 4; i++)
        -:  980:        {
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:
        -:  984:        //other players discard hand and redraw if hand size > 4
    #####:  985:        for (i = 0; i < state->numPlayers; i++)
        -:  986:        {
    #####:  987:          if (i != currentPlayer)
        -:  988:            {
    #####:  989:              if ( state->handCount[i] > 4 )
        -:  990:              {
        -:  991:                //discard hand
    #####:  992:                while( state->handCount[i] > 0 )
        -:  993:                {
    #####:  994:                  discardCard(handPos, i, state, 0);
        -:  995:                }
        -:  996:
        -:  997:                //draw 4
    #####:  998:                for (j = 0; j < 4; j++)
        -:  999:                {
    #####: 1000:                  drawCard(i, state);
    #####: 1001:                }
    #####: 1002:              }
    #####: 1003:            }
    #####: 1004:          }
        -: 1005:
    #####: 1006:      }
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:      playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:        if (state->deckCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:          state->deckCount[nextPlayer]--;
    #####: 1018:        }
    #####: 1019:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:          state->discardCount[nextPlayer]--;
    #####: 1022:        }
        -: 1023:        else{
        -: 1024:          //No Card to Reveal
        -: 1025:          if (DEBUG){
        -: 1026:            printf("No cards to reveal\n");
        -: 1027:          }
        -: 1028:        }
    #####: 1029:      }
        -: 1030:    
        -: 1031:      else{
    #####: 1032:        if (state->deckCount[nextPlayer] == 0){
    #####: 1033:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:            state->deckCount[nextPlayer]++;
    #####: 1036:            state->discard[nextPlayer][i] = -1;
    #####: 1037:            state->discardCount[nextPlayer]--;
    #####: 1038:          }
        -: 1039:    
    #####: 1040:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1041:        } 
    #####: 1042:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:        state->deckCount[nextPlayer]--;
    #####: 1045:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:        state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:        state->playedCardCount++;
    #####: 1053:        tributeRevealedCards[1] = -1;
    #####: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:          state->coins += 2;
    #####: 1059:        }
        -: 1060:            
    #####: 1061:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:          drawCard(currentPlayer, state);
    #####: 1063:          drawCard(currentPlayer, state);
    #####: 1064:        }
        -: 1065:        else{//Action Card
    #####: 1066:          state->numActions = state->numActions + 2;
        -: 1067:        }
    #####: 1068:      }
        -: 1069:    
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:      {
    #####: 1077:        return -1;
        -: 1078:      }
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:      {
    #####: 1082:        return -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:      {
    #####: 1087:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:          {
    #####: 1089:            j++;
    #####: 1090:          }
    #####: 1091:      }
    #####: 1092:      if (j < choice2)
        -: 1093:      {
    #####: 1094:        return -1;
        -: 1095:      }
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:      {
    #####: 1106:        if (i != currentPlayer)
        -: 1107:          {
    #####: 1108:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1109:          }
    #####: 1110:      }
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:      {
    #####: 1118:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:        {
    #####: 1120:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:          {
    #####: 1122:            discardCard(i, currentPlayer, state, 1);
    #####: 1123:            break;
        -: 1124:          }
    #####: 1125:        }
    #####: 1126:      }
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:      {
    #####: 1135:        if (i != currentPlayer)
        -: 1136:        {
    #####: 1137:          for (j = 0; j < state->handCount[i]; j++)
        -: 1138:          {
    #####: 1139:            if (state->hand[i][j] == copper)
        -: 1140:            {
    #####: 1141:              discardCard(j, i, state, 0);
    #####: 1142:              break;
        -: 1143:            }
    #####: 1144:            if (j == state->handCount[i])
        -: 1145:            {
    #####: 1146:              for (k = 0; k < state->handCount[i]; k++)
        -: 1147:              {
        -: 1148:                if (DEBUG)
        -: 1149:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1150:              }
    #####: 1151:              break;
        -: 1152:            }
    #####: 1153:          }
        -: 1154:
    #####: 1155:        }
        -: 1156:
    #####: 1157:      }
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:      {
    #####: 1172:        return -1;
        -: 1173:      }
        -: 1174:
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:
    #####: 1194:      if (choice1)
        -: 1195:      {
        -: 1196:        //gain coins equal to trashed card
    #####: 1197:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:        //trash card
    #####: 1199:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1200:      }
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:        if (i != currentPlayer){
    #####: 1209:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];    state->deckCount[i]--;
    #####: 1210:          state->discardCount[i]++;
    #####: 1211:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1212:        }
    #####: 1213:      }
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:      {
    #####: 1221:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:          {
    #####: 1223:            index = i;
    #####: 1224:            break;
        -: 1225:          }
    #####: 1226:      }
    #####: 1227:      if (index > -1)
        -: 1228:      {
        -: 1229:        //trash both treasure cards
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:        //gain 4 Gold cards
    #####: 1234:        for (i = 0; i < 4; i++)
        -: 1235:          {
    #####: 1236:            gainCard(gold, state, 1, currentPlayer);
    #####: 1237:          }
        -: 1238:
        -: 1239:        //return success
    #####: 1240:        return 1;
        -: 1241:      }
        -: 1242:
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:  return -1;
        3: 1248:}
        -: 1249:
        -: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:  //if card is not trashed, added to Played pile 
        2: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
        2: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1258:      state->playedCardCount++;
        2: 1259:    }
        -: 1260:
        -: 1261:  //set played card to -1
        2: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:  //remove card from player's hand
        2: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
    #####: 1269:    }
        2: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        -: 1275:  else 
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
        2: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
        2: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
        2: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
        2: 1285:  return 0;
        -: 1286:}
        -: 1287:
        -: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
        1: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
    #####: 1307:    }
        1: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
    #####: 1312:    }
        -: 1313:  else
        -: 1314:    {
        1: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:  //decrease number in supply pile
        1: 1320:  state->supplyCount[supplyPos]--;
        -: 1321: 
        1: 1322:  return 0;
        1: 1323:}
        -: 1324:
        -: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:
        -: 1329:  //reset coin count
        9: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
      112: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:  {
       47: 1335:    if (state->hand[player][i] == copper)
        -: 1336:    {
       44: 1337:      state->coins += 1;
       44: 1338:    }
        3: 1339:    else if (state->hand[player][i] == silver)
        -: 1340:    {
    #####: 1341:      state->coins += 2;
    #####: 1342:    }
        3: 1343:    else if (state->hand[player][i] == gold)
        -: 1344:    {
        1: 1345:      state->coins += 3;
        1: 1346:    }
       47: 1347:  }
        -: 1348:
        -: 1349:  //add bonus
        9: 1350:  state->coins += bonus;
        -: 1351:
        9: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
************************Testing Card: village ************
*********************Test One *********************
Does the player with village get one cards?
hand count = 5, expected = 5
deck count = 4, expected = 4
discard count = 0, expected = 1
********************************************************
Now I will test that the other players data has not changed
hand count = 0, expected = 0
deck count = 10, expected = 10
discard count = 0, expected = 0
I have checked the players' game state and the others' players game state.
Now, I will look at the game state that is shared.coins = 5, expected coins = 5
Did the card increase the number of actions by 2?
numActions = 3, expected actions = 3numPlayers = 2, expected = 2 
numBuys = 2, expected = 1 
I changed the code, so the number of buys was not correct.
I commented out the assertion for the test file to run.
********************************************************
Now I will check the kingdom and victory cards are as expected
This is the check of the kingdom cards
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
This is a check of the victory cards
estate : 8, expected: 8
duchy : 8, expected: 8
province : 8, expected: 8
******************************* Tests Done *****************
Passing Tests: 11
Failing Tests: 1
File 'dominion.c'
Lines executed:34.97% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      294:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      294:   11:  if (*(int*)a < *(int*)b)
      105:   12:    return -1;
      189:   13:  return 0;
      294:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       18:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      198:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     1980:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
     1710:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
      900:   65:      }
       90:   66:   } 
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        9:   72:  if (numPlayers == 2)
        -:   73:    {
        7:   74:      state->supplyCount[curse] = 10;
        7:   75:    }
        2:   76:  else if (numPlayers == 3)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 20;
        1:   79:    }
        -:   80:  else
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        9:   86:  if (numPlayers == 2)
        -:   87:    {
        7:   88:      state->supplyCount[estate] = 8;
        7:   89:      state->supplyCount[duchy] = 8;
        7:   90:      state->supplyCount[province] = 8;
        7:   91:    }
        -:   92:  else
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 12;
        2:   95:      state->supplyCount[duchy] = 12;
        2:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        9:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  101:  state->supplyCount[silver] = 40;
        9:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      378:  105:  for (i = adventurer; i <= treasure_map; i++)       //loop all cards
        -:  106:  {
     2970:  107:    for (j = 0; j < 10; j++)           //loop chosen cards
        -:  108:    {
     1395:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
      180:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
    #####:  114:          if (numPlayers == 2){ 
    #####:  115:            state->supplyCount[i] = 8; 
    #####:  116:          }
    #####:  117:          else{ state->supplyCount[i] = 12; }
    #####:  118:        }
        -:  119:        else
        -:  120:        {
       90:  121:          state->supplyCount[i] = 10;
        -:  122:        }
       90:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:        {
     1305:  127:          state->supplyCount[i] = -1;
        -:  128:        }
     1305:  129:    }
        -:  130:
      180:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       60:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
       21:  139:    state->deckCount[i] = 0;
      168:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       63:  142:      state->deck[i][j] = estate;
       63:  143:      state->deckCount[i]++;
       63:  144:    }
      336:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
      147:  147:      state->deck[i][j] = copper;
      147:  148:      state->deckCount[i]++;
      147:  149:    }
       21:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       60:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
       21:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:    return -1;
        -:  158:    }
       21:  159:  }
        -:  160:
        -:  161:  //draw player hands
       60:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {  
        -:  164:    //initialize hand size to zero
       21:  165:    state->handCount[i] = 0;
       21:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //{
        -:  170:    //  drawCard(i, state);
        -:  171:    //}
       21:  172:  }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      504:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
      243:  177:    state->embargoTokens[i] = 0;
      243:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
        9:  181:  state->outpostPlayed = 0;
        9:  182:  state->phase = 0;
        9:  183:  state->numActions = 1;
        9:  184:  state->numBuys = 1;
        9:  185:  state->playedCardCount = 0;
        9:  186:  state->whoseTurn = 0;
        9:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
      108:  191:  for (it = 0; it < 5; it++){
       45:  192:    drawCard(state->whoseTurn, state);
       45:  193:  }
        -:  194:
        9:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        9:  197:  return 0;
        9:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       21:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       21:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
       21:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      462:  213:  while (state->deckCount[player] > 0) {
      210:  214:    card = floor(Random() * state->deckCount[player]);
      210:  215:    newDeck[newDeckPos] = state->deck[player][card];
      210:  216:    newDeckPos++;
     1542:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      561:  218:      state->deck[player][i] = state->deck[player][i+1];
      561:  219:    }
      210:  220:    state->deckCount[player]--;
        -:  221:  }
      462:  222:  for (i = 0; i < newDeckPos; i++) {
      210:  223:    state->deck[player][i] = newDeck[i];
      210:  224:    state->deckCount[player]++;
      210:  225:  }
        -:  226:
       21:  227:  return 0;
       21:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{
        -:  232:  int card;
        4:  233:  int coin_bonus = 0; //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
        4:  236:  if (state->phase != 0)
        -:  237:    {
        1:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
        3:  242:  if ( state->numActions < 1 )
        -:  243:  {
        1:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
        2:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
        3:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
        1:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
        1:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
        1:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
        1:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
        1:  268:  return 0;
        4:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        1:  288:    return -1;
        2:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        4:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
        2:  315:  int currentPlayer = whoseTurn(state);
        2:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
    #####:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
    #####:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
    #####:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
        6:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:      {
    #####:  405:        j++;
    #####:  406:      }
    #####:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    #####:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:      {
    #####:  468:        players[i] = -9999;
    #####:  469:      }
        -:  470:      else
        -:  471:      {
    #####:  472:        players[i] = scoreFor (i, state);
        -:  473:      }
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
    #####:  483:    }
    #####:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
    #####:  494:    }
    #####:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
    #####:  504:    }
    #####:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
    #####:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
    #####:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{
        -:  526:  int count;
        -:  527:  int deckCounter;
       54:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:  else{
       54:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       54:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       54:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       54:  575:    state->deckCount[player]--;
       54:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       54:  579:  return 0;
       54:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
       30:  584:  switch( cardNumber ) 
        -:  585:  {
        -:  586:    case curse:
        1:  587:      return 0;
        -:  588:    case estate:
        1:  589:      return 2;
        -:  590:    case duchy:
        1:  591:      return 5;
        -:  592:    case province:
        1:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
        1:  597:      return 3;
        -:  598:    case gold:
        1:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
        1:  603:      return 5;
        -:  604:    case feast:
        1:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
        1:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        4:  615:      return 3;
        -:  616:    case baron:
        1:  617:      return 4;
        -:  618:    case great_hall:
        1:  619:      return 3;
        -:  620:    case minion:
        1:  621:      return 5;
        -:  622:    case steward:
        1:  623:      return 3;
        -:  624:    case tribute:
        1:  625:      return 5;
        -:  626:    case ambassador:
        1:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo: 
        1:  631:      return 2;
        -:  632:    case outpost:
        1:  633:      return 5;
        -:  634:    case salvager:
        1:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
        1:  639:      return 4;
        -:  640:  }
        -:  641:
    #####:  642:  return -1;
       30:  643:}
        -:  644:
        -:  645:void playAdventurer( struct gameState * state, int currentPlayer, int * z, int * cardDrawn, int * drawntreasure, int * temphand)
        -:  646:{
        6:  647:  while(*drawntreasure <2){
        2:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:      shuffle(currentPlayer, state);
    #####:  650:    }
        2:  651:    drawCard(currentPlayer, state);
        2:  652:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  653:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
        -:  654:    //drawntreasure should be 1 or 2
        1:  655:    *drawntreasure = *drawntreasure + 2;
        -:  656:    else{
        1:  657:      temphand[*z]= *cardDrawn;
        1:  658:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  659:      *z = *z + 1;
        -:  660:    }
        -:  661:  }
        4:  662:  while(*z-1>=0){
        1:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
        1:  664:    *z = *z-1;
        -:  665:  }
        1:  666:}
        -:  667:void playSmithy( struct gameState * state, int currentPlayer, int handPos)
        -:  668:{
        -:  669:  //+3 Cards
       16:  670:  for (int i = 0; i < 3; i++)
        -:  671:  {
        6:  672:    drawCard(currentPlayer, state);
        6:  673:  }
        -:  674:  // shouldn't be here but gives player two more coins
        2:  675:  state->coins += 2;
        -:  676:  //discard card from hand
        2:  677:  discardCard(handPos, currentPlayer, state, 0);
        2:  678:}
        -:  679:void playVillage( struct gameState * state, int currentPlayer, int handPos)
        -:  680:{
        -:  681:  //+1 Card
        1:  682:  drawCard(currentPlayer, state);
        -:  683:  // this line increased numbers of buys should not happen
        1:  684:  state->numBuys++;//Increase buys by 1!
        -:  685:  //+2 Actions
        1:  686:  state->numActions = state->numActions + 2;
        -:  687:  //discard played card from hand
        1:  688:  discardCard(handPos, currentPlayer, state, 0);
        1:  689:}
        -:  690:void playGreatHall( struct gameState * state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:        //+1 Card
    #####:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+1 Actions
        -:  696:      // should be 1 but I changed to two actions. A.P.
    #####:  697:      state->numActions = state->numActions + 2;
        -:  698:
        -:  699:      //discard card from hand
    #####:  700:      discardCard(handPos, currentPlayer, state, 0);
    #####:  701:}
        -:  702:void playSteward( struct gameState * state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -:  703:{
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
        -:  707:    //should be +2 but I changed to 3 A.P.
    #####:  708:    drawCard(currentPlayer, state);
    #####:  709:    drawCard(currentPlayer, state);
    #####:  710:    drawCard(currentPlayer, state);
    #####:  711:  }
    #####:  712:  else if (choice1 == 2)
        -:  713:  {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
    #####:  716:  }
        -:  717:  else
        -:  718:  {
        -:  719:    //trash 2 cards in hand
    #####:  720:    discardCard(choice2, currentPlayer, state, 1);
    #####:  721:    discardCard(choice3, currentPlayer, state, 1);
        -:  722:  }
        -:  723:
        -:  724:  //discard card from hand
    #####:  725:  discardCard(handPos, currentPlayer, state, 0);
    #####:  726:}
        -:  727:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  728:{
        -:  729:  int i;
        -:  730:  int j;
        -:  731:  int k;
        -:  732:  int x;
        -:  733:  int index;
        4:  734:  int currentPlayer = whoseTurn(state);
        4:  735:  int nextPlayer = currentPlayer + 1;
        -:  736:
        4:  737:  int tributeRevealedCards[2] = {-1, -1};
        -:  738:  int temphand[MAX_HAND];// moved above the if statement
        4:  739:  int drawntreasure=0;
        -:  740:  int cardDrawn;
        4:  741:  int z = 0;// this is the counter for the temp hand
        4:  742:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  743:    nextPlayer = 0;
    #####:  744:  }
        -:  745:  
        -:  746:
        -:  747:  //uses switch to select card and perform actions
        4:  748:  switch( card ) 
        -:  749:    {
        -:  750:    case adventurer:
        1:  751:      playAdventurer(state, currentPlayer, &z, & cardDrawn, & drawntreasure, temphand);
        1:  752:      return 0;
        -:  753:
        -:  754:    case council_room:
        -:  755:      //+4 Cards
    #####:  756:      for (i = 0; i < 4; i++)
        -:  757:      {
    #####:  758:        drawCard(currentPlayer, state);
    #####:  759:      }
        -:  760:
        -:  761:      //+1 Buy
    #####:  762:      state->numBuys++;
        -:  763:
        -:  764:      //Each other player draws a card
    #####:  765:      for (i = 0; i < state->numPlayers; i++)
        -:  766:      {
    #####:  767:        if ( i != currentPlayer )
        -:  768:          {
    #####:  769:            drawCard(i, state);
    #####:  770:          }
    #####:  771:      }
        -:  772:
        -:  773:      //put played card in played card pile
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  782:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
    #####:  791:        if (supplyCount(choice1, state) <= 0){
        -:  792:          if (DEBUG)
        -:  793:            printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:          if (DEBUG){
        -:  796:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:          }
    #####:  798:        }
    #####:  799:        else if (state->coins < getCost(choice1)){
    #####:  800:          printf("That card is too expensive!\n");
        -:  801:
        -:  802:          if (DEBUG){
        -:  803:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:          }
    #####:  805:        }
        -:  806:        else{
        -:  807:
        -:  808:          if (DEBUG){
        -:  809:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:          }
        -:  811:
    #####:  812:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:          x = 0;//No more buying cards
        -:  814:
        -:  815:          if (DEBUG){
        -:  816:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:          }
        -:  818:
        -:  819:        }
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  824:state->hand[currentPlayer][i] = temphand[i];
    #####:  825:temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      
    #####:  829:      return 0;
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:      {
    #####:  839:        return -1;
        -:  840:      }
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:      {
    #####:  849:        return -1;
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);
    #####:  863:            break;
        -:  864:          }
    #####:  865:      }
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  884:      {
    #####:  885:        if (state->hand[currentPlayer][i] == j)
        -:  886:          {
    #####:  887:            discardCard(i, currentPlayer, state, 0);
    #####:  888:            break;
        -:  889:          }
    #####:  890:      }
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case smithy:
        2:  896:      playSmithy(state, currentPlayer, handPos);
        2:  897:      return 0;
        -:  898:
        -:  899:    case village:
        1:  900:      playVillage(state, currentPlayer, handPos);
        1:  901:      return 0;
        -:  902:
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:        int p = 0;//Iterator for hand!
    #####:  907:        int card_not_discarded = 1;//Flag for discard set!
    #####:  908:        while(card_not_discarded){
    #####:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:            state->discardCount[currentPlayer]++;
    #####:  913:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  915:            }
    #####:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:            state->handCount[currentPlayer]--;
    #####:  918:            card_not_discarded = 0;//Exit the loop
    #####:  919:          }
    #####:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
    #####:  925:            if (supplyCount(estate, state) > 0){
    #####:  926:              gainCard(estate, state, 0, currentPlayer);
    #####:  927:              state->supplyCount[estate]--;//Decrement estates
    #####:  928:              if (supplyCount(estate, state) == 0){
    #####:  929:        isGameOver(state);
    #####:  930:              }
    #####:  931:            }
    #####:  932:            card_not_discarded = 0;//Exit the loop
    #####:  933:          }
        -:  934:      
        -:  935:          else{
    #####:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
    #####:  939:      }
        -:  940:    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
    #####:  947:          }
    #####:  948:        }
        -:  949:      }
        -:  950:    
        -:  951:      
    #####:  952:      return 0;
        -:  953:
        -:  954:    case great_hall:
    #####:  955:      playGreatHall( state, currentPlayer, handPos);
    #####:  956:      return 0;
        -:  957:
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
    #####:  965:      if (choice1)//+2 coins
        -:  966:      {
    #####:  967:        state->coins = state->coins + 2;
    #####:  968:      }
        -:  969:
    #####:  970:      else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:      {
        -:  972:        //discard hand
    #####:  973:        while(numHandCards(state) > 0)
        -:  974:        {
    #####:  975:          discardCard(handPos, currentPlayer, state, 0);
        -:  976:        }
        -:  977:
        -:  978:        //draw 4
    #####:  979:        for (i = 0; i < 4; i++)
        -:  980:        {
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:
        -:  984:        //other players discard hand and redraw if hand size > 4
    #####:  985:        for (i = 0; i < state->numPlayers; i++)
        -:  986:        {
    #####:  987:          if (i != currentPlayer)
        -:  988:            {
    #####:  989:              if ( state->handCount[i] > 4 )
        -:  990:              {
        -:  991:                //discard hand
    #####:  992:                while( state->handCount[i] > 0 )
        -:  993:                {
    #####:  994:                  discardCard(handPos, i, state, 0);
        -:  995:                }
        -:  996:
        -:  997:                //draw 4
    #####:  998:                for (j = 0; j < 4; j++)
        -:  999:                {
    #####: 1000:                  drawCard(i, state);
    #####: 1001:                }
    #####: 1002:              }
    #####: 1003:            }
    #####: 1004:          }
        -: 1005:
    #####: 1006:      }
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:      playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:        if (state->deckCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:          state->deckCount[nextPlayer]--;
    #####: 1018:        }
    #####: 1019:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:          state->discardCount[nextPlayer]--;
    #####: 1022:        }
        -: 1023:        else{
        -: 1024:          //No Card to Reveal
        -: 1025:          if (DEBUG){
        -: 1026:            printf("No cards to reveal\n");
        -: 1027:          }
        -: 1028:        }
    #####: 1029:      }
        -: 1030:    
        -: 1031:      else{
    #####: 1032:        if (state->deckCount[nextPlayer] == 0){
    #####: 1033:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:            state->deckCount[nextPlayer]++;
    #####: 1036:            state->discard[nextPlayer][i] = -1;
    #####: 1037:            state->discardCount[nextPlayer]--;
    #####: 1038:          }
        -: 1039:    
    #####: 1040:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1041:        } 
    #####: 1042:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:        state->deckCount[nextPlayer]--;
    #####: 1045:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:        state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:        state->playedCardCount++;
    #####: 1053:        tributeRevealedCards[1] = -1;
    #####: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:          state->coins += 2;
    #####: 1059:        }
        -: 1060:            
    #####: 1061:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:          drawCard(currentPlayer, state);
    #####: 1063:          drawCard(currentPlayer, state);
    #####: 1064:        }
        -: 1065:        else{//Action Card
    #####: 1066:          state->numActions = state->numActions + 2;
        -: 1067:        }
    #####: 1068:      }
        -: 1069:    
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:      {
    #####: 1077:        return -1;
        -: 1078:      }
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:      {
    #####: 1082:        return -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:      {
    #####: 1087:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:          {
    #####: 1089:            j++;
    #####: 1090:          }
    #####: 1091:      }
    #####: 1092:      if (j < choice2)
        -: 1093:      {
    #####: 1094:        return -1;
        -: 1095:      }
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:      {
    #####: 1106:        if (i != currentPlayer)
        -: 1107:          {
    #####: 1108:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1109:          }
    #####: 1110:      }
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:      {
    #####: 1118:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:        {
    #####: 1120:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:          {
    #####: 1122:            discardCard(i, currentPlayer, state, 1);
    #####: 1123:            break;
        -: 1124:          }
    #####: 1125:        }
    #####: 1126:      }
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:      {
    #####: 1135:        if (i != currentPlayer)
        -: 1136:        {
    #####: 1137:          for (j = 0; j < state->handCount[i]; j++)
        -: 1138:          {
    #####: 1139:            if (state->hand[i][j] == copper)
        -: 1140:            {
    #####: 1141:              discardCard(j, i, state, 0);
    #####: 1142:              break;
        -: 1143:            }
    #####: 1144:            if (j == state->handCount[i])
        -: 1145:            {
    #####: 1146:              for (k = 0; k < state->handCount[i]; k++)
        -: 1147:              {
        -: 1148:                if (DEBUG)
        -: 1149:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1150:              }
    #####: 1151:              break;
        -: 1152:            }
    #####: 1153:          }
        -: 1154:
    #####: 1155:        }
        -: 1156:
    #####: 1157:      }
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:      {
    #####: 1172:        return -1;
        -: 1173:      }
        -: 1174:
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:
    #####: 1194:      if (choice1)
        -: 1195:      {
        -: 1196:        //gain coins equal to trashed card
    #####: 1197:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:        //trash card
    #####: 1199:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1200:      }
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:        if (i != currentPlayer){
    #####: 1209:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];    state->deckCount[i]--;
    #####: 1210:          state->discardCount[i]++;
    #####: 1211:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1212:        }
    #####: 1213:      }
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:      {
    #####: 1221:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:          {
    #####: 1223:            index = i;
    #####: 1224:            break;
        -: 1225:          }
    #####: 1226:      }
    #####: 1227:      if (index > -1)
        -: 1228:      {
        -: 1229:        //trash both treasure cards
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:        //gain 4 Gold cards
    #####: 1234:        for (i = 0; i < 4; i++)
        -: 1235:          {
    #####: 1236:            gainCard(gold, state, 1, currentPlayer);
    #####: 1237:          }
        -: 1238:
        -: 1239:        //return success
    #####: 1240:        return 1;
        -: 1241:      }
        -: 1242:
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:  return -1;
        4: 1248:}
        -: 1249:
        -: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:  //if card is not trashed, added to Played pile 
        3: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
        3: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1258:      state->playedCardCount++;
        3: 1259:    }
        -: 1260:
        -: 1261:  //set played card to -1
        3: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:  //remove card from player's hand
        3: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
    #####: 1269:    }
        3: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        -: 1275:  else 
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
        3: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
        3: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
        3: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
        3: 1285:  return 0;
        -: 1286:}
        -: 1287:
        -: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
        1: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
    #####: 1307:    }
        1: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
    #####: 1312:    }
        -: 1313:  else
        -: 1314:    {
        1: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:  //decrease number in supply pile
        1: 1320:  state->supplyCount[supplyPos]--;
        -: 1321: 
        1: 1322:  return 0;
        1: 1323:}
        -: 1324:
        -: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:
        -: 1329:  //reset coin count
       10: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
      124: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:  {
       52: 1335:    if (state->hand[player][i] == copper)
        -: 1336:    {
       49: 1337:      state->coins += 1;
       49: 1338:    }
        3: 1339:    else if (state->hand[player][i] == silver)
        -: 1340:    {
    #####: 1341:      state->coins += 2;
    #####: 1342:    }
        3: 1343:    else if (state->hand[player][i] == gold)
        -: 1344:    {
        1: 1345:      state->coins += 3;
        1: 1346:    }
       52: 1347:  }
        -: 1348:
        -: 1349:  //add bonus
       10: 1350:  state->coins += bonus;
        -: 1351:
       10: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
************************Testing Card: great hall ************
*********************Test One *********************
Does the player with great_hall get a card?
hand count = 5, expected = 5
deck count = 4, expected = 4
discard count = 0, expected = 1
********************************************************
Now I will test that the other players data has not changed
hand count = 0, expected = 0
deck count = 10, expected = 10
discard count = 0, expected = 0
I have checked the players' game state and the others' players game state.
Now, I will look at the game state that is shared.coins = 5, expected coins = 5
Is there one extra action now?
numActions = 3, expected actions = 2The extra action assertion failed because I changed the code.
It is now giving two actions
I commented out the assertion.
numPlayers = 2, expected = 2 
numBuys = 1, expected = 1 
********************************************************
Now I will check the kingdom and victory cards are as expected
This is the check of the kingdom cards
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
kingdom card: -1, expected: -1
kingdom card: 10, expected: 10
kingdom card: -1, expected: -1
This is a check of the victory cards
estate : 8, expected: 8
duchy : 8, expected: 8
province : 8, expected: 8
******************************* Tests Done *****************
Passing Tests: 9
Failing Tests: 1
File 'dominion.c'
Lines executed:35.89% of 652
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      322:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      322:   11:  if (*(int*)a < *(int*)b)
      115:   12:    return -1;
      207:   13:  return 0;
      322:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
        -:   58:  {
     2200:   59:      for (j = 0; j < 10; j++)
        -:   60:      {
     1900:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
     1000:   65:      }
      100:   66:   } 
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
       10:   72:  if (numPlayers == 2)
        -:   73:    {
        8:   74:      state->supplyCount[curse] = 10;
        8:   75:    }
        2:   76:  else if (numPlayers == 3)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 20;
        1:   79:    }
        -:   80:  else
        -:   81:    {
        1:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
       10:   86:  if (numPlayers == 2)
        -:   87:    {
        8:   88:      state->supplyCount[estate] = 8;
        8:   89:      state->supplyCount[duchy] = 8;
        8:   90:      state->supplyCount[province] = 8;
        8:   91:    }
        -:   92:  else
        -:   93:    {
        2:   94:      state->supplyCount[estate] = 12;
        2:   95:      state->supplyCount[duchy] = 12;
        2:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
       10:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  101:  state->supplyCount[silver] = 40;
       10:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      420:  105:  for (i = adventurer; i <= treasure_map; i++)       //loop all cards
        -:  106:  {
     3300:  107:    for (j = 0; j < 10; j++)           //loop chosen cards
        -:  108:    {
     1550:  109:      if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
      200:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:        {
    #####:  114:          if (numPlayers == 2){ 
    #####:  115:            state->supplyCount[i] = 8; 
    #####:  116:          }
    #####:  117:          else{ state->supplyCount[i] = 12; }
    #####:  118:        }
        -:  119:        else
        -:  120:        {
      100:  121:          state->supplyCount[i] = 10;
        -:  122:        }
      100:  123:        break;
        -:  124:      }
        -:  125:      else    //card is not in the set choosen for the game
        -:  126:        {
     1450:  127:          state->supplyCount[i] = -1;
        -:  128:        }
     1450:  129:    }
        -:  130:
      200:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       66:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:  {
       23:  139:    state->deckCount[i] = 0;
      184:  140:    for (j = 0; j < 3; j++)
        -:  141:    {
       69:  142:      state->deck[i][j] = estate;
       69:  143:      state->deckCount[i]++;
       69:  144:    }
      368:  145:    for (j = 3; j < 10; j++)
        -:  146:    {
      161:  147:      state->deck[i][j] = copper;
      161:  148:      state->deckCount[i]++;
      161:  149:    }
       23:  150:  }
        -:  151:
        -:  152:  //shuffle player decks
       66:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:  {
       23:  155:    if ( shuffle(i, state) < 0 )
        -:  156:    {
    #####:  157:    return -1;
        -:  158:    }
       23:  159:  }
        -:  160:
        -:  161:  //draw player hands
       66:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:  {  
        -:  164:    //initialize hand size to zero
       23:  165:    state->handCount[i] = 0;
       23:  166:    state->discardCount[i] = 0;
        -:  167:    //draw 5 cards
        -:  168:    // for (j = 0; j < 5; j++)
        -:  169:    //{
        -:  170:    //  drawCard(i, state);
        -:  171:    //}
       23:  172:  }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      560:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:  {
      270:  177:    state->embargoTokens[i] = 0;
      270:  178:  }
        -:  179:
        -:  180:  //initialize first player's turn
       10:  181:  state->outpostPlayed = 0;
       10:  182:  state->phase = 0;
       10:  183:  state->numActions = 1;
       10:  184:  state->numBuys = 1;
       10:  185:  state->playedCardCount = 0;
       10:  186:  state->whoseTurn = 0;
       10:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
      120:  191:  for (it = 0; it < 5; it++){
       50:  192:    drawCard(state->whoseTurn, state);
       50:  193:  }
        -:  194:
       10:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
       10:  197:  return 0;
       10:  198:}
        -:  199:
        -:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       23:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       23:  208:  if (state->deckCount[player] < 1)
    #####:  209:    return -1;
       23:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      506:  213:  while (state->deckCount[player] > 0) {
      230:  214:    card = floor(Random() * state->deckCount[player]);
      230:  215:    newDeck[newDeckPos] = state->deck[player][card];
      230:  216:    newDeckPos++;
     1690:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      615:  218:      state->deck[player][i] = state->deck[player][i+1];
      615:  219:    }
      230:  220:    state->deckCount[player]--;
        -:  221:  }
      506:  222:  for (i = 0; i < newDeckPos; i++) {
      230:  223:    state->deck[player][i] = newDeck[i];
      230:  224:    state->deckCount[player]++;
      230:  225:  }
        -:  226:
       23:  227:  return 0;
       23:  228:}
        -:  229:
        -:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{
        -:  232:  int card;
        4:  233:  int coin_bonus = 0; //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
        4:  236:  if (state->phase != 0)
        -:  237:    {
        1:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //check if player has enough actions
        3:  242:  if ( state->numActions < 1 )
        -:  243:  {
        1:  244:    return -1;
        -:  245:  }
        -:  246:
        -:  247:  //get card played
        2:  248:  card = handCard(handPos, state);
        -:  249:
        -:  250:  //check if selected card is an action
        3:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:  {
        1:  253:    return -1;
        -:  254:  }
        -:  255:
        -:  256:  //play card
        1:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:  {
    #####:  259:    return -1;
        -:  260:  }
        -:  261:
        -:  262:  //reduce number of actions
        1:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
        1:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:
        1:  268:  return 0;
        4:  269:}
        -:  270:
        -:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
        4:  279:  who = state->whoseTurn;
        -:  280:
        4:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
        1:  284:    return -1;
        3:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
        1:  288:    return -1;
        2:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  292:    return -1;
        -:  293:  } else {
        1:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
        1:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
        1:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        1:  307:  return 0;
        4:  308:}
        -:  309:
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
        -:  314:int handCard(int handPos, struct gameState *state) {
        2:  315:  int currentPlayer = whoseTurn(state);
        2:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
        -:  319:int supplyCount(int card, struct gameState *state) {
        4:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:  {
    #####:  329:    if (state->deck[player][i] == card) count++;
    #####:  330:  }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:  {
    #####:  334:    if (state->hand[player][i] == card) count++;
    #####:  335:  }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:  {
    #####:  339:    if (state->discard[player][i] == card) count++;
    #####:  340:  }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
        -:  345:int whoseTurn(struct gameState *state) {
        7:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:      {
    #####:  405:        j++;
    #####:  406:      }
    #####:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    #####:  414:}
        -:  415:
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:  {
    #####:  434:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  440:  }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:      {
    #####:  468:        players[i] = -9999;
    #####:  469:      }
        -:  470:      else
        -:  471:      {
    #####:  472:        players[i] = scoreFor (i, state);
        -:  473:      }
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:  {
    #####:  480:    if (players[i] > players[j])
        -:  481:    {
    #####:  482:      j = i;
    #####:  483:    }
    #####:  484:  }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:  {
    #####:  491:    if ( players[i] == highScore && i > currentPlayer )
        -:  492:    {
    #####:  493:      players[i]++;
    #####:  494:    }
    #####:  495:  }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:  {
    #####:  501:    if ( players[i] > players[j] )
        -:  502:    {
    #####:  503:      j = i;
    #####:  504:    }
    #####:  505:  }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:  {
    #####:  511:    if ( players[i] == highScore )
        -:  512:    {
    #####:  513:      players[i] = 1;
    #####:  514:    }
        -:  515:    else
        -:  516:    {
    #####:  517:      players[i] = 0;
        -:  518:    }
    #####:  519:  }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{
        -:  526:  int count;
        -:  527:  int deckCounter;
       60:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:  else{
       60:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
       60:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
       60:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       60:  575:    state->deckCount[player]--;
       60:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
       60:  579:  return 0;
       60:  580:}
        -:  581:
        -:  582:int getCost(int cardNumber)
        -:  583:{
       30:  584:  switch( cardNumber ) 
        -:  585:  {
        -:  586:    case curse:
        1:  587:      return 0;
        -:  588:    case estate:
        1:  589:      return 2;
        -:  590:    case duchy:
        1:  591:      return 5;
        -:  592:    case province:
        1:  593:      return 8;
        -:  594:    case copper:
        1:  595:      return 0;
        -:  596:    case silver:
        1:  597:      return 3;
        -:  598:    case gold:
        1:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
        1:  603:      return 5;
        -:  604:    case feast:
        1:  605:      return 4;
        -:  606:    case gardens:
        1:  607:      return 4;
        -:  608:    case mine:
        1:  609:      return 5;
        -:  610:    case remodel:
        1:  611:      return 4;
        -:  612:    case smithy:
        1:  613:      return 4;
        -:  614:    case village:
        4:  615:      return 3;
        -:  616:    case baron:
        1:  617:      return 4;
        -:  618:    case great_hall:
        1:  619:      return 3;
        -:  620:    case minion:
        1:  621:      return 5;
        -:  622:    case steward:
        1:  623:      return 3;
        -:  624:    case tribute:
        1:  625:      return 5;
        -:  626:    case ambassador:
        1:  627:      return 3;
        -:  628:    case cutpurse:
        1:  629:      return 4;
        -:  630:    case embargo: 
        1:  631:      return 2;
        -:  632:    case outpost:
        1:  633:      return 5;
        -:  634:    case salvager:
        1:  635:      return 4;
        -:  636:    case sea_hag:
        1:  637:      return 4;
        -:  638:    case treasure_map:
        1:  639:      return 4;
        -:  640:  }
        -:  641:
    #####:  642:  return -1;
       30:  643:}
        -:  644:
        -:  645:void playAdventurer( struct gameState * state, int currentPlayer, int * z, int * cardDrawn, int * drawntreasure, int * temphand)
        -:  646:{
        6:  647:  while(*drawntreasure <2){
        2:  648:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  649:      shuffle(currentPlayer, state);
    #####:  650:    }
        2:  651:    drawCard(currentPlayer, state);
        2:  652:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4:  653:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
        -:  654:    //drawntreasure should be 1 or 2
        1:  655:    *drawntreasure = *drawntreasure + 2;
        -:  656:    else{
        1:  657:      temphand[*z]= *cardDrawn;
        1:  658:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        1:  659:      *z = *z + 1;
        -:  660:    }
        -:  661:  }
        4:  662:  while(*z-1>=0){
        1:  663:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*z-1]; // discard all cards in play that have been drawn
        1:  664:    *z = *z-1;
        -:  665:  }
        1:  666:}
        -:  667:void playSmithy( struct gameState * state, int currentPlayer, int handPos)
        -:  668:{
        -:  669:  //+3 Cards
       16:  670:  for (int i = 0; i < 3; i++)
        -:  671:  {
        6:  672:    drawCard(currentPlayer, state);
        6:  673:  }
        -:  674:  // shouldn't be here but gives player two more coins
        2:  675:  state->coins += 2;
        -:  676:  //discard card from hand
        2:  677:  discardCard(handPos, currentPlayer, state, 0);
        2:  678:}
        -:  679:void playVillage( struct gameState * state, int currentPlayer, int handPos)
        -:  680:{
        -:  681:  //+1 Card
        1:  682:  drawCard(currentPlayer, state);
        -:  683:  // this line increased numbers of buys should not happen
        1:  684:  state->numBuys++;//Increase buys by 1!
        -:  685:  //+2 Actions
        1:  686:  state->numActions = state->numActions + 2;
        -:  687:  //discard played card from hand
        1:  688:  discardCard(handPos, currentPlayer, state, 0);
        1:  689:}
        -:  690:void playGreatHall( struct gameState * state, int currentPlayer, int handPos)
        -:  691:{
        -:  692:        //+1 Card
        1:  693:      drawCard(currentPlayer, state);
        -:  694:
        -:  695:      //+1 Actions
        -:  696:      // should be 1 but I changed to two actions. A.P.
        1:  697:      state->numActions = state->numActions + 2;
        -:  698:
        -:  699:      //discard card from hand
        1:  700:      discardCard(handPos, currentPlayer, state, 0);
        1:  701:}
        -:  702:void playSteward( struct gameState * state, int currentPlayer, int handPos, int choice1, int choice2, int choice3)
        -:  703:{
    #####:  704:  if (choice1 == 1)
        -:  705:  {
        -:  706:    //+2 cards
        -:  707:    //should be +2 but I changed to 3 A.P.
    #####:  708:    drawCard(currentPlayer, state);
    #####:  709:    drawCard(currentPlayer, state);
    #####:  710:    drawCard(currentPlayer, state);
    #####:  711:  }
    #####:  712:  else if (choice1 == 2)
        -:  713:  {
        -:  714:    //+2 coins
    #####:  715:    state->coins = state->coins + 2;
    #####:  716:  }
        -:  717:  else
        -:  718:  {
        -:  719:    //trash 2 cards in hand
    #####:  720:    discardCard(choice2, currentPlayer, state, 1);
    #####:  721:    discardCard(choice3, currentPlayer, state, 1);
        -:  722:  }
        -:  723:
        -:  724:  //discard card from hand
    #####:  725:  discardCard(handPos, currentPlayer, state, 0);
    #####:  726:}
        -:  727:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  728:{
        -:  729:  int i;
        -:  730:  int j;
        -:  731:  int k;
        -:  732:  int x;
        -:  733:  int index;
        5:  734:  int currentPlayer = whoseTurn(state);
        5:  735:  int nextPlayer = currentPlayer + 1;
        -:  736:
        5:  737:  int tributeRevealedCards[2] = {-1, -1};
        -:  738:  int temphand[MAX_HAND];// moved above the if statement
        5:  739:  int drawntreasure=0;
        -:  740:  int cardDrawn;
        5:  741:  int z = 0;// this is the counter for the temp hand
        5:  742:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  743:    nextPlayer = 0;
    #####:  744:  }
        -:  745:  
        -:  746:
        -:  747:  //uses switch to select card and perform actions
        5:  748:  switch( card ) 
        -:  749:    {
        -:  750:    case adventurer:
        1:  751:      playAdventurer(state, currentPlayer, &z, & cardDrawn, & drawntreasure, temphand);
        1:  752:      return 0;
        -:  753:
        -:  754:    case council_room:
        -:  755:      //+4 Cards
    #####:  756:      for (i = 0; i < 4; i++)
        -:  757:      {
    #####:  758:        drawCard(currentPlayer, state);
    #####:  759:      }
        -:  760:
        -:  761:      //+1 Buy
    #####:  762:      state->numBuys++;
        -:  763:
        -:  764:      //Each other player draws a card
    #####:  765:      for (i = 0; i < state->numPlayers; i++)
        -:  766:      {
    #####:  767:        if ( i != currentPlayer )
        -:  768:          {
    #####:  769:            drawCard(i, state);
    #####:  770:          }
    #####:  771:      }
        -:  772:
        -:  773:      //put played card in played card pile
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
    #####:  776:      return 0;
        -:  777:
        -:  778:    case feast:
        -:  779:      //gain card with cost up to 5
        -:  780:      //Backup hand
    #####:  781:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  782:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  783:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  784:      }
        -:  785:      //Backup hand
        -:  786:
        -:  787:      //Update Coins for Buy
    #####:  788:      updateCoins(currentPlayer, state, 5);
    #####:  789:      x = 1;//Condition to loop on
    #####:  790:      while( x == 1) {//Buy one card
    #####:  791:        if (supplyCount(choice1, state) <= 0){
        -:  792:          if (DEBUG)
        -:  793:            printf("None of that card left, sorry!\n");
        -:  794:
        -:  795:          if (DEBUG){
        -:  796:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  797:          }
    #####:  798:        }
    #####:  799:        else if (state->coins < getCost(choice1)){
    #####:  800:          printf("That card is too expensive!\n");
        -:  801:
        -:  802:          if (DEBUG){
        -:  803:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  804:          }
    #####:  805:        }
        -:  806:        else{
        -:  807:
        -:  808:          if (DEBUG){
        -:  809:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  810:          }
        -:  811:
    #####:  812:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  813:          x = 0;//No more buying cards
        -:  814:
        -:  815:          if (DEBUG){
        -:  816:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:          }
        -:  818:
        -:  819:        }
        -:  820:      }     
        -:  821:
        -:  822:      //Reset Hand
    #####:  823:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  824:state->hand[currentPlayer][i] = temphand[i];
    #####:  825:temphand[i] = -1;
    #####:  826:      }
        -:  827:      //Reset Hand
        -:  828:      
    #####:  829:      return 0;
        -:  830:
        -:  831:    case gardens:
    #####:  832:      return -1;
        -:  833:
        -:  834:    case mine:
    #####:  835:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  836:
    #####:  837:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  838:      {
    #####:  839:        return -1;
        -:  840:      }
        -:  841:
    #####:  842:      if (choice2 > treasure_map || choice2 < curse)
        -:  843:      {
    #####:  844:        return -1;
        -:  845:      }
        -:  846:
    #####:  847:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  848:      {
    #####:  849:        return -1;
        -:  850:      }
        -:  851:
    #####:  852:      gainCard(choice2, state, 2, currentPlayer);
        -:  853:
        -:  854:      //discard card from hand
    #####:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:
        -:  857:      //discard trashed card
    #####:  858:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  859:      {
    #####:  860:        if (state->hand[currentPlayer][i] == j)
        -:  861:          {
    #####:  862:            discardCard(i, currentPlayer, state, 0);
    #####:  863:            break;
        -:  864:          }
    #####:  865:      }
        -:  866:
    #####:  867:      return 0;
        -:  868:
        -:  869:    case remodel:
    #####:  870:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  871:
    #####:  872:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  873:      {
    #####:  874:        return -1;
        -:  875:      }
        -:  876:
    #####:  877:      gainCard(choice2, state, 0, currentPlayer);
        -:  878:
        -:  879:      //discard card from hand
    #####:  880:      discardCard(handPos, currentPlayer, state, 0);
        -:  881:
        -:  882:      //discard trashed card
    #####:  883:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  884:      {
    #####:  885:        if (state->hand[currentPlayer][i] == j)
        -:  886:          {
    #####:  887:            discardCard(i, currentPlayer, state, 0);
    #####:  888:            break;
        -:  889:          }
    #####:  890:      }
        -:  891:
        -:  892:
    #####:  893:      return 0;
        -:  894:
        -:  895:    case smithy:
        2:  896:      playSmithy(state, currentPlayer, handPos);
        2:  897:      return 0;
        -:  898:
        -:  899:    case village:
        1:  900:      playVillage(state, currentPlayer, handPos);
        1:  901:      return 0;
        -:  902:
        -:  903:    case baron:
    #####:  904:      state->numBuys++;//Increase buys by 1!
    #####:  905:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  906:        int p = 0;//Iterator for hand!
    #####:  907:        int card_not_discarded = 1;//Flag for discard set!
    #####:  908:        while(card_not_discarded){
    #####:  909:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  910:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  911:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  912:            state->discardCount[currentPlayer]++;
    #####:  913:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  914:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  915:            }
    #####:  916:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  917:            state->handCount[currentPlayer]--;
    #####:  918:            card_not_discarded = 0;//Exit the loop
    #####:  919:          }
    #####:  920:          else if (p > state->handCount[currentPlayer]){
        -:  921:            if(DEBUG) {
        -:  922:              printf("No estate cards in your hand, invalid choice\n");
        -:  923:              printf("Must gain an estate if there are any\n");
        -:  924:            }
    #####:  925:            if (supplyCount(estate, state) > 0){
    #####:  926:              gainCard(estate, state, 0, currentPlayer);
    #####:  927:              state->supplyCount[estate]--;//Decrement estates
    #####:  928:              if (supplyCount(estate, state) == 0){
    #####:  929:        isGameOver(state);
    #####:  930:              }
    #####:  931:            }
    #####:  932:            card_not_discarded = 0;//Exit the loop
    #####:  933:          }
        -:  934:      
        -:  935:          else{
    #####:  936:            p++;//Next card
        -:  937:          }
        -:  938:        }
    #####:  939:      }
        -:  940:    
        -:  941:      else{
    #####:  942:        if (supplyCount(estate, state) > 0){
    #####:  943:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  944:          state->supplyCount[estate]--;//Decrement Estates
    #####:  945:          if (supplyCount(estate, state) == 0){
    #####:  946:            isGameOver(state);
    #####:  947:          }
    #####:  948:        }
        -:  949:      }
        -:  950:    
        -:  951:      
    #####:  952:      return 0;
        -:  953:
        -:  954:    case great_hall:
        1:  955:      playGreatHall( state, currentPlayer, handPos);
        1:  956:      return 0;
        -:  957:
        -:  958:    case minion:
        -:  959:      //+1 action
    #####:  960:      state->numActions++;
        -:  961:
        -:  962:      //discard card from hand
    #####:  963:      discardCard(handPos, currentPlayer, state, 0);
        -:  964:
    #####:  965:      if (choice1)//+2 coins
        -:  966:      {
    #####:  967:        state->coins = state->coins + 2;
    #####:  968:      }
        -:  969:
    #####:  970:      else if (choice2)//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  971:      {
        -:  972:        //discard hand
    #####:  973:        while(numHandCards(state) > 0)
        -:  974:        {
    #####:  975:          discardCard(handPos, currentPlayer, state, 0);
        -:  976:        }
        -:  977:
        -:  978:        //draw 4
    #####:  979:        for (i = 0; i < 4; i++)
        -:  980:        {
    #####:  981:          drawCard(currentPlayer, state);
    #####:  982:        }
        -:  983:
        -:  984:        //other players discard hand and redraw if hand size > 4
    #####:  985:        for (i = 0; i < state->numPlayers; i++)
        -:  986:        {
    #####:  987:          if (i != currentPlayer)
        -:  988:            {
    #####:  989:              if ( state->handCount[i] > 4 )
        -:  990:              {
        -:  991:                //discard hand
    #####:  992:                while( state->handCount[i] > 0 )
        -:  993:                {
    #####:  994:                  discardCard(handPos, i, state, 0);
        -:  995:                }
        -:  996:
        -:  997:                //draw 4
    #####:  998:                for (j = 0; j < 4; j++)
        -:  999:                {
    #####: 1000:                  drawCard(i, state);
    #####: 1001:                }
    #####: 1002:              }
    #####: 1003:            }
    #####: 1004:          }
        -: 1005:
    #####: 1006:      }
    #####: 1007:      return 0;
        -: 1008:
        -: 1009:    case steward:
    #####: 1010:      playSteward(state, currentPlayer, handPos, choice1, choice2, choice3);
    #####: 1011:      return 0;
        -: 1012:
        -: 1013:    case tribute:
    #####: 1014:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1015:        if (state->deckCount[nextPlayer] > 0){
    #####: 1016:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1017:          state->deckCount[nextPlayer]--;
    #####: 1018:        }
    #####: 1019:        else if (state->discardCount[nextPlayer] > 0){
    #####: 1020:          tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1021:          state->discardCount[nextPlayer]--;
    #####: 1022:        }
        -: 1023:        else{
        -: 1024:          //No Card to Reveal
        -: 1025:          if (DEBUG){
        -: 1026:            printf("No cards to reveal\n");
        -: 1027:          }
        -: 1028:        }
    #####: 1029:      }
        -: 1030:    
        -: 1031:      else{
    #####: 1032:        if (state->deckCount[nextPlayer] == 0){
    #####: 1033:          for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1034:            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1035:            state->deckCount[nextPlayer]++;
    #####: 1036:            state->discard[nextPlayer][i] = -1;
    #####: 1037:            state->discardCount[nextPlayer]--;
    #####: 1038:          }
        -: 1039:    
    #####: 1040:          shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1041:        } 
    #####: 1042:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1043:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1044:        state->deckCount[nextPlayer]--;
    #####: 1045:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:        state->deckCount[nextPlayer]--;
        -: 1048:      }    
        -: 1049:       
    #####: 1050:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1051:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1052:        state->playedCardCount++;
    #####: 1053:        tributeRevealedCards[1] = -1;
    #####: 1054:      }
        -: 1055:
    #####: 1056:      for (i = 0; i <= 2; i ++){
    #####: 1057:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1058:          state->coins += 2;
    #####: 1059:        }
        -: 1060:            
    #####: 1061:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1062:          drawCard(currentPlayer, state);
    #####: 1063:          drawCard(currentPlayer, state);
    #####: 1064:        }
        -: 1065:        else{//Action Card
    #####: 1066:          state->numActions = state->numActions + 2;
        -: 1067:        }
    #####: 1068:      }
        -: 1069:    
    #####: 1070:      return 0;
        -: 1071:
        -: 1072:    case ambassador:
    #####: 1073:      j = 0;//used to check if player has enough cards to discard
        -: 1074:
    #####: 1075:      if (choice2 > 2 || choice2 < 0)
        -: 1076:      {
    #####: 1077:        return -1;
        -: 1078:      }
        -: 1079:
    #####: 1080:      if (choice1 == handPos)
        -: 1081:      {
    #####: 1082:        return -1;
        -: 1083:      }
        -: 1084:
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1086:      {
    #####: 1087:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1088:          {
    #####: 1089:            j++;
    #####: 1090:          }
    #####: 1091:      }
    #####: 1092:      if (j < choice2)
        -: 1093:      {
    #####: 1094:        return -1;
        -: 1095:      }
        -: 1096:
        -: 1097:      if (DEBUG) 
        -: 1098:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1099:
        -: 1100:      //increase supply count for choosen card by amount being discarded
    #####: 1101:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1102:
        -: 1103:      //each other player gains a copy of revealed card
    #####: 1104:      for (i = 0; i < state->numPlayers; i++)
        -: 1105:      {
    #####: 1106:        if (i != currentPlayer)
        -: 1107:          {
    #####: 1108:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1109:          }
    #####: 1110:      }
        -: 1111:
        -: 1112:      //discard played card from hand
    #####: 1113:      discardCard(handPos, currentPlayer, state, 0);
        -: 1114:
        -: 1115:      //trash copies of cards returned to supply
    #####: 1116:      for (j = 0; j < choice2; j++)
        -: 1117:      {
    #####: 1118:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1119:        {
    #####: 1120:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1121:          {
    #####: 1122:            discardCard(i, currentPlayer, state, 1);
    #####: 1123:            break;
        -: 1124:          }
    #####: 1125:        }
    #####: 1126:      }
        -: 1127:
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case cutpurse:
        -: 1131:
    #####: 1132:      updateCoins(currentPlayer, state, 2);
    #####: 1133:      for (i = 0; i < state->numPlayers; i++)
        -: 1134:      {
    #####: 1135:        if (i != currentPlayer)
        -: 1136:        {
    #####: 1137:          for (j = 0; j < state->handCount[i]; j++)
        -: 1138:          {
    #####: 1139:            if (state->hand[i][j] == copper)
        -: 1140:            {
    #####: 1141:              discardCard(j, i, state, 0);
    #####: 1142:              break;
        -: 1143:            }
    #####: 1144:            if (j == state->handCount[i])
        -: 1145:            {
    #####: 1146:              for (k = 0; k < state->handCount[i]; k++)
        -: 1147:              {
        -: 1148:                if (DEBUG)
        -: 1149:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1150:              }
    #####: 1151:              break;
        -: 1152:            }
    #####: 1153:          }
        -: 1154:
    #####: 1155:        }
        -: 1156:
    #####: 1157:      }
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);
        -: 1161:
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:
        -: 1165:    case embargo: 
        -: 1166:      //+2 Coins
    #####: 1167:      state->coins = state->coins + 2;
        -: 1168:
        -: 1169:      //see if selected pile is in play
    #####: 1170:      if ( state->supplyCount[choice1] == -1 )
        -: 1171:      {
    #####: 1172:        return -1;
        -: 1173:      }
        -: 1174:
        -: 1175:      //add embargo token to selected supply pile
    #####: 1176:      state->embargoTokens[choice1]++;
        -: 1177:
        -: 1178:      //trash card
    #####: 1179:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:    case outpost:
        -: 1183:      //set outpost flag
    #####: 1184:      state->outpostPlayed++;
        -: 1185:
        -: 1186:      //discard card
    #####: 1187:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1188:      return 0;
        -: 1189:
        -: 1190:    case salvager:
        -: 1191:      //+1 buy
    #####: 1192:      state->numBuys++;
        -: 1193:
    #####: 1194:      if (choice1)
        -: 1195:      {
        -: 1196:        //gain coins equal to trashed card
    #####: 1197:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1198:        //trash card
    #####: 1199:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1200:      }
        -: 1201:
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:
        -: 1206:    case sea_hag:
    #####: 1207:      for (i = 0; i < state->numPlayers; i++){
    #####: 1208:        if (i != currentPlayer){
    #####: 1209:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];    state->deckCount[i]--;
    #####: 1210:          state->discardCount[i]++;
    #####: 1211:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1212:        }
    #####: 1213:      }
    #####: 1214:      return 0;
        -: 1215:
        -: 1216:    case treasure_map:
        -: 1217:      //search hand for another treasure_map
    #####: 1218:      index = -1;
    #####: 1219:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:      {
    #####: 1221:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1222:          {
    #####: 1223:            index = i;
    #####: 1224:            break;
        -: 1225:          }
    #####: 1226:      }
    #####: 1227:      if (index > -1)
        -: 1228:      {
        -: 1229:        //trash both treasure cards
    #####: 1230:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1231:        discardCard(index, currentPlayer, state, 1);
        -: 1232:
        -: 1233:        //gain 4 Gold cards
    #####: 1234:        for (i = 0; i < 4; i++)
        -: 1235:          {
    #####: 1236:            gainCard(gold, state, 1, currentPlayer);
    #####: 1237:          }
        -: 1238:
        -: 1239:        //return success
    #####: 1240:        return 1;
        -: 1241:      }
        -: 1242:
        -: 1243:      //no second treasure_map found in hand
    #####: 1244:      return -1;
        -: 1245:    }
        -: 1246:
    #####: 1247:  return -1;
        5: 1248:}
        -: 1249:
        -: 1250:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1251:{
        -: 1252:
        -: 1253:  //if card is not trashed, added to Played pile 
        4: 1254:  if (trashFlag < 1)
        -: 1255:    {
        -: 1256:      //add card to played pile
        4: 1257:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1258:      state->playedCardCount++;
        4: 1259:    }
        -: 1260:
        -: 1261:  //set played card to -1
        4: 1262:  state->hand[currentPlayer][handPos] = -1;
        -: 1263:
        -: 1264:  //remove card from player's hand
        4: 1265:  if ( handPos == (state->handCount[currentPlayer] - 1) ) //last card in hand array is played
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
    #####: 1269:    }
        4: 1270:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
    #####: 1273:      state->handCount[currentPlayer]--;
    #####: 1274:    }
        -: 1275:  else 
        -: 1276:    {
        -: 1277:      //replace discarded card with last card in hand
        4: 1278:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1279:      //set last card to -1
        4: 1280:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1281:      //reduce number of cards in hand
        4: 1282:      state->handCount[currentPlayer]--;
        -: 1283:    }
        -: 1284:
        4: 1285:  return 0;
        -: 1286:}
        -: 1287:
        -: 1288:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1289:{
        -: 1290:  //Note: supplyPos is enum of choosen card
        -: 1291:
        -: 1292:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1293:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1294:    {
    #####: 1295:      return -1;
        -: 1296:    }
        -: 1297:
        -: 1298:  //added card for [whoseTurn] current player:
        -: 1299:  // toFlag = 0 : add to discard
        -: 1300:  // toFlag = 1 : add to deck
        -: 1301:  // toFlag = 2 : add to hand
        -: 1302:
        1: 1303:  if (toFlag == 1)
        -: 1304:    {
    #####: 1305:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1306:      state->deckCount[player]++;
    #####: 1307:    }
        1: 1308:  else if (toFlag == 2)
        -: 1309:    {
    #####: 1310:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1311:      state->handCount[player]++;
    #####: 1312:    }
        -: 1313:  else
        -: 1314:    {
        1: 1315:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1316:      state->discardCount[player]++;
        -: 1317:    }
        -: 1318:
        -: 1319:  //decrease number in supply pile
        1: 1320:  state->supplyCount[supplyPos]--;
        -: 1321: 
        1: 1322:  return 0;
        1: 1323:}
        -: 1324:
        -: 1325:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1326:{
        -: 1327:  int i;
        -: 1328:
        -: 1329:  //reset coin count
       11: 1330:  state->coins = 0;
        -: 1331:
        -: 1332:  //add coins for each Treasure card in player's hand
      136: 1333:  for (i = 0; i < state->handCount[player]; i++)
        -: 1334:  {
       57: 1335:    if (state->hand[player][i] == copper)
        -: 1336:    {
       54: 1337:      state->coins += 1;
       54: 1338:    }
        3: 1339:    else if (state->hand[player][i] == silver)
        -: 1340:    {
    #####: 1341:      state->coins += 2;
    #####: 1342:    }
        3: 1343:    else if (state->hand[player][i] == gold)
        -: 1344:    {
        1: 1345:      state->coins += 3;
        1: 1346:    }
       57: 1347:  }
        -: 1348:
        -: 1349:  //add bonus
       11: 1350:  state->coins += bonus;
        -: 1351:
       11: 1352:  return 0;
        -: 1353:}
        -: 1354:
        -: 1355:
        -: 1356://end of dominion.c
        -: 1357:
