Testing great hall.
Random Tests

Enter a positive integer seed (9 digits or less) >> All Tests OK
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:94.87% of 78
Branches executed:100.00% of 46
Taken at least once:86.96% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:92.86% of 14
Branches executed:100.00% of 10
Taken at least once:80.00% of 10
No calls

Function 'buyCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:100.00% of 24
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'cardEffect'
Lines executed:6.97% of 244
Branches executed:13.94% of 165
Taken at least once:3.64% of 165
No calls

Function 'adventurerPlay'
Lines executed:100.00% of 19
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'minePlay'
Lines executed:0.00% of 17
Branches executed:0.00% of 14
Taken at least once:0.00% of 14
No calls

Function 'remodelPlay'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'smithyPlay'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'villagePlay'
Lines executed:100.00% of 5
No branches
No calls

Function 'discardCard'
Lines executed:86.67% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:53.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'updateCoins'
Lines executed:85.71% of 14
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

File 'dominion.c'
Lines executed:39.91% of 654
Branches executed:39.57% of 417
Taken at least once:31.89% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 185199 returned 100% blocks executed 100%
        -:    8:int compare(const void* a, const void* b) {
   185199:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1143
branch  1 taken 184056
     1143:   10:    return 1;
   184056:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 60753
branch  1 taken 123303
    60753:   12:    return -1;
   123303:   13:  return 0;
   185199:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6010 returned 100% blocks executed 94%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     6010:   44:  SelectStream(1);
     6010:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    12020:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 6010
branch  1 taken 0
branch  2 taken 0
branch  3 taken 6010
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     6010:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   132220:   57:  for (i = 0; i < 10; i++)
branch  0 taken 60100
branch  1 taken 6010
        -:   58:    {
  1322200:   59:      for (j = 0; j < 10; j++)
branch  0 taken 601000
branch  1 taken 60100
        -:   60:        {
  1141900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 540900
branch  1 taken 60100
branch  2 taken 0
branch  3 taken 540900
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
   601000:   65:        }
    60100:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     6010:   73:  if (numPlayers == 2)
branch  0 taken 6008
branch  1 taken 2
        -:   74:    {
     6008:   75:      state->supplyCount[curse] = 10;
     6008:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 1
branch  1 taken 1
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        1:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     6010:   87:  if (numPlayers == 2)
branch  0 taken 6008
branch  1 taken 2
        -:   88:    {
     6008:   89:      state->supplyCount[estate] = 8;
     6008:   90:      state->supplyCount[duchy] = 8;
     6008:   91:      state->supplyCount[province] = 8;
     6008:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     6010:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     6010:  102:  state->supplyCount[silver] = 40;
     6010:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   252420:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 120200
branch  1 taken 6010
        -:  107:    {
  2643300:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 1201550
branch  1 taken 120100
        -:  109:	{
  1201550:  110:	  if (kingdomCards[j] == i)
branch  0 taken 100
branch  1 taken 1201450
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      196:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 96
branch  1 taken 4
branch  2 taken 0
branch  3 taken 96
        -:  114:		{
        4:  115:		  if (numPlayers == 2){ 
branch  0 taken 4
branch  1 taken 0
        4:  116:		    state->supplyCount[i] = 8; 
        4:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        4:  119:		}
        -:  120:	      else
        -:  121:		{
       96:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1201450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
  1201450:  130:	}
        -:  131:
   120200:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    36066:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12023
branch  1 taken 6010
        -:  139:    {
    12023:  140:      state->deckCount[i] = 0;
    96184:  141:      for (j = 0; j < 3; j++)
branch  0 taken 36069
branch  1 taken 12023
        -:  142:	{
    36069:  143:	  state->deck[i][j] = estate;
    36069:  144:	  state->deckCount[i]++;
    36069:  145:	}
   192368:  146:      for (j = 3; j < 10; j++)
branch  0 taken 84161
branch  1 taken 12023
        -:  147:	{
    84161:  148:	  state->deck[i][j] = copper;
    84161:  149:	  state->deckCount[i]++;		
    84161:  150:	}
    12023:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    36066:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12023
branch  1 taken 6010
        -:  155:    {
    12023:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0
branch  1 taken 12023
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
    12023:  160:    }
        -:  161:
        -:  162:  //draw player hands
    36066:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 12023
branch  1 taken 6010
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    12023:  166:      state->handCount[i] = 0;
    12023:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
    12023:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   336560:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 162270
branch  1 taken 6010
        -:  177:    {
   162270:  178:      state->embargoTokens[i] = 0;
   162270:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     6010:  182:  state->outpostPlayed = 0;
     6010:  183:  state->phase = 0;
     6010:  184:  state->numActions = 1;
     6010:  185:  state->numBuys = 1;
     6010:  186:  state->playedCardCount = 0;
     6010:  187:  state->whoseTurn = 0;
     6010:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    72120:  192:  for (it = 0; it < 5; it++){
branch  0 taken 30050
branch  1 taken 6010
    30050:  193:    drawCard(state->whoseTurn, state);
    30050:  194:  }
        -:  195:
     6010:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     6010:  198:  return 0;
     6010:  199:}
        -:  200:
function shuffle called 12409 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    12409:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    12409:  209:  if (state->deckCount[player] < 1)
branch  0 taken 340
branch  1 taken 12069
      340:  210:    return -1;
    12069:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   293894:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 134878
branch  1 taken 12069
   134878:  215:    card = floor(Random() * state->deckCount[player]);
   134878:  216:    newDeck[newDeckPos] = state->deck[player][card];
   134878:  217:    newDeckPos++;
  3485900:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 1608072
branch  1 taken 134878
  1608072:  219:      state->deck[player][i] = state->deck[player][i+1];
  1608072:  220:    }
   134878:  221:    state->deckCount[player]--;
        -:  222:  }
   293894:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 134878
branch  1 taken 12069
   134878:  224:    state->deck[player][i] = newDeck[i];
   134878:  225:    state->deckCount[player]++;
   134878:  226:  }
        -:  227:
    12069:  228:  return 0;
    12409:  229:}
        -:  230:
function playCard called 4 returned 100% blocks executed 91%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        4:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        4:  237:  if (state->phase != 0)
branch  0 taken 1
branch  1 taken 3
        -:  238:    {
        1:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        3:  243:  if ( state->numActions < 1 )
branch  0 taken 1
branch  1 taken 2
        -:  244:    {
        1:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        2:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        3:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 1
branch  1 taken 1
branch  2 taken 0
branch  3 taken 1
        -:  253:    {
        1:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0
branch  1 taken 1
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        1:  269:  return 0;
        4:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 1
branch  1 taken 3
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 1
branch  1 taken 2
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 1
branch  1 taken 1
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        1:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        1:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        1:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        1:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        1:  308:  return 0;
        4:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 2 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
        2:  316:  int currentPlayer = whoseTurn(state);
        2:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 4 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        4:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 10008 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
    10008:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 528962 returned 100% blocks executed 100%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   528962:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 203
branch  1 taken 528759
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    29702:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 14648
branch  1 taken 203
    14648:  534:      state->deck[player][i] = state->discard[player][i];
    14648:  535:      state->discard[player][i] = -1;
    14648:  536:    }
        -:  537:
      203:  538:    state->deckCount[player] = state->discardCount[player];
      203:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      203:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      203:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      203:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      203:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      203:  559:    if (deckCounter == 0)
branch  0 taken 157
branch  1 taken 46
      157:  560:      return -1;
        -:  561:
       46:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  563:    state->deckCount[player]--;
       46:  564:    state->handCount[player]++;//Increment hand count
       46:  565:  }
        -:  566:
        -:  567:  else{
   528759:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   528759:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   528759:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   528759:  576:    state->deckCount[player]--;
   528759:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   528805:  580:  return 0;
   528962:  581:}
        -:  582:
function getCost called 30 returned 100% blocks executed 96%
        -:  583:int getCost(int cardNumber)
        -:  584:{
       30:  585:  switch( cardNumber ) 
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 1
branch  7 taken 1
branch  8 taken 1
branch  9 taken 1
branch 10 taken 1
branch 11 taken 1
branch 12 taken 1
branch 13 taken 1
branch 14 taken 4
branch 15 taken 1
branch 16 taken 1
branch 17 taken 1
branch 18 taken 1
branch 19 taken 1
branch 20 taken 1
branch 21 taken 1
branch 22 taken 1
branch 23 taken 1
branch 24 taken 1
branch 25 taken 1
branch 26 taken 1
branch 27 taken 0
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        4:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
       30:  644:}
        -:  645:
function cardEffect called 6002 returned 100% blocks executed 4%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     6002:  653:  int currentPlayer = whoseTurn(state);
     6002:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     6002:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     6002:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
     6002:  660:  int z = 0;// this is the counter for the temp hand
     6002:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 1001
branch  1 taken 5001
     1001:  662:    nextPlayer = 0;
     1001:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     6002:  667:  switch( card ) 
branch  0 taken 2000
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 1
branch  7 taken 2000
branch  8 taken 0
branch  9 taken 2001
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:	/*
        -:  671:      while(drawntreasure<2){
        -:  672:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  673:	  shuffle(currentPlayer, state);
        -:  674:	}
        -:  675:	drawCard(currentPlayer, state);
        -:  676:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  677:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  678:	  drawntreasure++;
        -:  679:	else{
        -:  680:	  temphand[z]=cardDrawn;
        -:  681:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  682:	  z++;
        -:  683:	}
        -:  684:      }
        -:  685:      while(z-1>=0){
        -:  686:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  687:	z=z-1;
        -:  688:      }
        -:  689:	*/
     2000:  690:      return adventurerPlay(state);
        -:  691:				
        -:  692:    case council_room:
        -:  693:      //+4 Cards
    #####:  694:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  695:	{
    #####:  696:	  drawCard(currentPlayer, state);
    #####:  697:	}
        -:  698:			
        -:  699:      //+1 Buy
    #####:  700:      state->numBuys++;
        -:  701:			
        -:  702:      //Each other player draws a card
    #####:  703:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  704:	{
    #####:  705:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  706:	    {
    #####:  707:	      drawCard(i, state);
    #####:  708:	    }
    #####:  709:	}
        -:  710:			
        -:  711:      //put played card in played card pile
    #####:  712:      discardCard(handPos, currentPlayer, state, 0);
        -:  713:			
    #####:  714:      return 0;
        -:  715:			
        -:  716:    case feast:
        -:  717:      //gain card with cost up to 5
        -:  718:      //Backup hand
    #####:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  720:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  722:      }
        -:  723:      //Backup hand
        -:  724:
        -:  725:      //Update Coins for Buy
    #####:  726:      updateCoins(currentPlayer, state, 5);
    #####:  727:      x = 1;//Condition to loop on
    #####:  728:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  729:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  730:	  if (DEBUG)
        -:  731:	    printf("None of that card left, sorry!\n");
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  735:	  }
    #####:  736:	}
    #####:  737:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  738:	  printf("That card is too expensive!\n");
        -:  739:
        -:  740:	  if (DEBUG){
        -:  741:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  742:	  }
    #####:  743:	}
        -:  744:	else{
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:	  }
        -:  749:
    #####:  750:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  751:	  x = 0;//No more buying cards
        -:  752:
        -:  753:	  if (DEBUG){
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
        -:  756:
        -:  757:	}
        -:  758:      }     
        -:  759:
        -:  760:      //Reset Hand
    #####:  761:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  762:	state->hand[currentPlayer][i] = temphand[i];
    #####:  763:	temphand[i] = -1;
    #####:  764:      }
        -:  765:      //Reset Hand
        -:  766:      			
    #####:  767:      return 0;
        -:  768:			
        -:  769:    case gardens:
    #####:  770:      return -1;
        -:  771:			
        -:  772:    case mine:
        -:  773:	/*
        -:  774:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
        -:  776:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  777:	{
        -:  778:	  return -1;
        -:  779:	}
        -:  780:		
        -:  781:      if (choice2 > treasure_map || choice2 < curse)
        -:  782:	{
        -:  783:	  return -1;
        -:  784:	}
        -:  785:
        -:  786:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  787:	{
        -:  788:	  return -1;
        -:  789:	}
        -:  790:
        -:  791:      gainCard(choice2, state, 2, currentPlayer);
        -:  792:
        -:  793:      //discard card from hand
        -:  794:      discardCard(handPos, currentPlayer, state, 0);
        -:  795:
        -:  796:      //discard trashed card
        -:  797:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  798:	{
        -:  799:	  if (state->hand[currentPlayer][i] == j)
        -:  800:	    {
        -:  801:	      discardCard(i, currentPlayer, state, 0);			
        -:  802:	      break;
        -:  803:	    }
        -:  804:	}
        -:  805:	*/		
    #####:  806:      return minePlay(choice1, choice2, state, handPos);
        -:  807:			
        -:  808:    case remodel:
        -:  809:	/*
        -:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
        -:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  813:	{
        -:  814:	  return -1;
        -:  815:	}
        -:  816:
        -:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
        -:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
        -:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  824:	{
        -:  825:	  if (state->hand[currentPlayer][i] == j)
        -:  826:	    {
        -:  827:	      discardCard(i, currentPlayer, state, 0);			
        -:  828:	      break;
        -:  829:	    }
        -:  830:	}
        -:  831:
        -:  832:	*/
    #####:  833:      return remodelPlay(choice1, choice2, state, handPos);
        -:  834:		
        -:  835:    case smithy:
        -:  836:      //+3 Cards
        -:  837:      /*
        -:  838:      for (i = 0; i < 3; i++)
        -:  839:	{
        -:  840:	  drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
        -:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:	*/
        1:  846:      return smithyPlay(state, handPos);
        -:  847:		
        -:  848:    case village:
        -:  849:
        -:  850:	/*
        -:  851:      //+1 Card
        -:  852:      drawCard(currentPlayer, state);
        -:  853:			
        -:  854:      //+2 Actions
        -:  855:      state->numActions = state->numActions + 2;
        -:  856:			
        -:  857:      //discard played card from hand
        -:  858:      discardCard(handPos, currentPlayer, state, 0);
        -:  859:	*/
     2000:  860:      return villagePlay(state, handPos);
        -:  861:	
        -:  862:    case baron:
    #####:  863:      state->numBuys++;//Increase buys by 1!
    #####:  864:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  865:	int p = 0;//Iterator for hand!
    #####:  866:	int card_not_discarded = 1;//Flag for discard set!
    #####:  867:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  868:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  869:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  870:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  871:	    state->discardCount[currentPlayer]++;
    #####:  872:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  873:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  874:	    }
    #####:  875:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  876:	    state->handCount[currentPlayer]--;
    #####:  877:	    card_not_discarded = 0;//Exit the loop
    #####:  878:	  }
    #####:  879:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  880:	    if(DEBUG) {
        -:  881:	      printf("No estate cards in your hand, invalid choice\n");
        -:  882:	      printf("Must gain an estate if there are any\n");
        -:  883:	    }
    #####:  884:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  885:	      gainCard(estate, state, 0, currentPlayer);
    #####:  886:	      state->supplyCount[estate]--;//Decrement estates
    #####:  887:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  888:		isGameOver(state);
    #####:  889:	      }
    #####:  890:	    }
    #####:  891:	    card_not_discarded = 0;//Exit the loop
    #####:  892:	  }
        -:  893:			    
        -:  894:	  else{
    #####:  895:	    p++;//Next card
        -:  896:	  }
        -:  897:	}
    #####:  898:      }
        -:  899:			    
        -:  900:      else{
    #####:  901:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  903:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  904:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  905:	    isGameOver(state);
    #####:  906:	  }
    #####:  907:	}
        -:  908:      }
        -:  909:	    
        -:  910:      
    #####:  911:      return 0;
        -:  912:		
        -:  913:    case great_hall:
        -:  914:      //+1 Card
     2001:  915:      drawCard(currentPlayer, state);
        -:  916:			
        -:  917:      //+1 Actions
     2001:  918:      state->numActions++;
        -:  919:			
        -:  920:      //discard card from hand
     2001:  921:      discardCard(handPos, currentPlayer, state, 0);
     2001:  922:      return 0;
        -:  923:		
        -:  924:    case minion:
        -:  925:      //+1 action
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
        -:  930:			
    #####:  931:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  932:	{
    #####:  933:	  state->coins = state->coins + 2;
    #####:  934:	}
        -:  935:			
    #####:  936:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  937:	{
        -:  938:	  //discard hand
    #####:  939:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(handPos, currentPlayer, state, 0);
        -:  942:	    }
        -:  943:				
        -:  944:	  //draw 4
    #####:  945:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  946:	    {
    #####:  947:	      drawCard(currentPlayer, state);
    #####:  948:	    }
        -:  949:				
        -:  950:	  //other players discard hand and redraw if hand size > 4
    #####:  951:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  952:	    {
    #####:  953:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  954:		{
    #####:  955:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  956:		    {
        -:  957:		      //discard hand
    #####:  958:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  959:			{
    #####:  960:			  discardCard(handPos, i, state, 0);
        -:  961:			}
        -:  962:							
        -:  963:		      //draw 4
    #####:  964:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  965:			{
    #####:  966:			  drawCard(i, state);
    #####:  967:			}
    #####:  968:		    }
    #####:  969:		}
    #####:  970:	    }
        -:  971:				
    #####:  972:	}
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case steward:
    #####:  976:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  977:	{
        -:  978:	  //+2 cards
    #####:  979:	  drawCard(currentPlayer, state);
    #####:  980:	  drawCard(currentPlayer, state);
    #####:  981:	}
    #####:  982:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  983:	{
        -:  984:	  //+2 coins
    #####:  985:	  state->coins = state->coins + 2;
    #####:  986:	}
        -:  987:      else
        -:  988:	{
        -:  989:	  //trash 2 cards in hand
    #####:  990:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  991:	  discardCard(choice3, currentPlayer, state, 1);
        -:  992:	}
        -:  993:			
        -:  994:      //discard card from hand
    #####:  995:      discardCard(handPos, currentPlayer, state, 0);
    #####:  996:      return 0;
        -:  997:		
        -:  998:    case tribute:
    #####:  999:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1000:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1001:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1002:	  state->deckCount[nextPlayer]--;
    #####: 1003:	}
    #####: 1004:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1005:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1006:	  state->discardCount[nextPlayer]--;
    #####: 1007:	}
        -: 1008:	else{
        -: 1009:	  //No Card to Reveal
        -: 1010:	  if (DEBUG){
        -: 1011:	    printf("No cards to reveal\n");
        -: 1012:	  }
        -: 1013:	}
    #####: 1014:      }
        -: 1015:	    
        -: 1016:      else{
    #####: 1017:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1019:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1020:	    state->deckCount[nextPlayer]++;
    #####: 1021:	    state->discard[nextPlayer][i] = -1;
    #####: 1022:	    state->discardCount[nextPlayer]--;
    #####: 1023:	  }
        -: 1024:			    
    #####: 1025:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1026:	} 
    #####: 1027:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1028:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1029:	state->deckCount[nextPlayer]--;
    #####: 1030:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1031:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1032:	state->deckCount[nextPlayer]--;
        -: 1033:      }    
        -: 1034:		       
    #####: 1035:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1036:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1037:	state->playedCardCount++;
    #####: 1038:	tributeRevealedCards[1] = -1;
    #####: 1039:      }
        -: 1040:
    #####: 1041:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1042:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1043:	  state->coins += 2;
    #####: 1044:	}
        -: 1045:		    
    #####: 1046:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1047:	  drawCard(currentPlayer, state);
    #####: 1048:	  drawCard(currentPlayer, state);
    #####: 1049:	}
        -: 1050:	else{//Action Card
    #####: 1051:	  state->numActions = state->numActions + 2;
        -: 1052:	}
    #####: 1053:      }
        -: 1054:	    
    #####: 1055:      return 0;
        -: 1056:		
        -: 1057:    case ambassador:
    #####: 1058:      j = 0;		//used to check if player has enough cards to discard
        -: 1059:
    #####: 1060:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1061:	{
    #####: 1062:	  return -1;				
        -: 1063:	}
        -: 1064:
    #####: 1065:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  return -1;
        -: 1068:	}
        -: 1069:
    #####: 1070:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1071:	{
    #####: 1072:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1073:	    {
    #####: 1074:	      j++;
    #####: 1075:	    }
    #####: 1076:	}
    #####: 1077:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1078:	{
    #####: 1079:	  return -1;				
        -: 1080:	}
        -: 1081:
        -: 1082:      if (DEBUG) 
        -: 1083:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1084:
        -: 1085:      //increase supply count for choosen card by amount being discarded
    #####: 1086:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1087:			
        -: 1088:      //each other player gains a copy of revealed card
    #####: 1089:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1090:	{
    #####: 1091:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1092:	    {
    #####: 1093:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1094:	    }
    #####: 1095:	}
        -: 1096:
        -: 1097:      //discard played card from hand
    #####: 1098:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1099:
        -: 1100:      //trash copies of cards returned to supply
    #####: 1101:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1104:	    {
    #####: 1105:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1106:		{
    #####: 1107:		  discardCard(i, currentPlayer, state, 1);
    #####: 1108:		  break;
        -: 1109:		}
    #####: 1110:	    }
    #####: 1111:	}			
        -: 1112:
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case cutpurse:
        -: 1116:
    #####: 1117:      updateCoins(currentPlayer, state, 2);
    #####: 1118:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1121:	    {
    #####: 1122:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1123:		{
    #####: 1124:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1125:		    {
    #####: 1126:		      discardCard(j, i, state, 0);
    #####: 1127:		      break;
        -: 1128:		    }
    #####: 1129:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1130:		    {
    #####: 1131:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1132:			{
        -: 1133:			  if (DEBUG)
        -: 1134:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1135:			}	
    #####: 1136:		      break;
        -: 1137:		    }		
    #####: 1138:		}
        -: 1139:					
    #####: 1140:	    }
        -: 1141:				
    #####: 1142:	}				
        -: 1143:
        -: 1144:      //discard played card from hand
    #####: 1145:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1146:
    #####: 1147:      return 0;
        -: 1148:
        -: 1149:		
        -: 1150:    case embargo: 
        -: 1151:      //+2 Coins
    #####: 1152:      state->coins = state->coins + 2;
        -: 1153:			
        -: 1154:      //see if selected pile is in play
    #####: 1155:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1156:	{
    #####: 1157:	  return -1;
        -: 1158:	}
        -: 1159:			
        -: 1160:      //add embargo token to selected supply pile
    #####: 1161:      state->embargoTokens[choice1]++;
        -: 1162:			
        -: 1163:      //trash card
    #####: 1164:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1165:      return 0;
        -: 1166:		
        -: 1167:    case outpost:
        -: 1168:      //set outpost flag
    #####: 1169:      state->outpostPlayed++;
        -: 1170:			
        -: 1171:      //discard card
    #####: 1172:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1173:      return 0;
        -: 1174:		
        -: 1175:    case salvager:
        -: 1176:      //+1 buy
    #####: 1177:      state->numBuys++;
        -: 1178:			
    #####: 1179:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1180:	{
        -: 1181:	  //gain coins equal to trashed card
    #####: 1182:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1183:	  //trash card
    #####: 1184:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1185:	}
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case sea_hag:
    #####: 1192:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1193:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1194:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1195:	  state->discardCount[i]++;
    #####: 1196:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1197:	}
    #####: 1198:      }
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case treasure_map:
        -: 1202:      //search hand for another treasure_map
    #####: 1203:      index = -1;
    #####: 1204:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:	{
    #####: 1206:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1207:	    {
    #####: 1208:	      index = i;
    #####: 1209:	      break;
        -: 1210:	    }
    #####: 1211:	}
    #####: 1212:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1213:	{
        -: 1214:	  //trash both treasure cards
    #####: 1215:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1216:	  discardCard(index, currentPlayer, state, 1);
        -: 1217:
        -: 1218:	  //gain 4 Gold cards
    #####: 1219:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1220:	    {
    #####: 1221:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1222:	    }
        -: 1223:				
        -: 1224:	  //return success
    #####: 1225:	  return 1;
        -: 1226:	}
        -: 1227:			
        -: 1228:      //no second treasure_map found in hand
    #####: 1229:      return -1;
        -: 1230:    }
        -: 1231:	
    #####: 1232:  return -1;
     6002: 1233:}
        -: 1234:
function adventurerPlay called 2001 returned 100% blocks executed 100%
        -: 1235:int adventurerPlay(struct gameState *state) {
     2001: 1236:	int currentPlayer = whoseTurn(state);
        -: 1237:	int temphand[MAX_HAND];
     2001: 1238:	int drawntreasure = 0;
        -: 1239:	int cardDrawn;
     2001: 1240:	int z = 0;
   993818: 1241:	while(drawntreasure<4) { //bug introduced: correct logic is drawntreasure < 2
branch  0 taken 494908
branch  1 taken 2001
   494908: 1242:		if(state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle
branch  0 taken 183
branch  1 taken 494725
        -: 1243:							//discard and add to deck
      183: 1244:			shuffle(currentPlayer, state);
      183: 1245:		}
   494908: 1246:		drawCard(currentPlayer, state);
   494908: 1247:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
  1468748: 1248:		if(cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 486928
branch  1 taken 7980
branch  2 taken 486912
branch  3 taken 16
branch  4 taken 8
branch  5 taken 486904
     8004: 1249:			drawntreasure++;
     8004: 1250:		}
        -: 1251:		else {
   486904: 1252:			temphand[z] = cardDrawn;
   486904: 1253:			state->handCount[currentPlayer]--; //this should just remove the top card
        -: 1254:								//(the most recently drawn one).
   486904: 1255:			z++;
        -: 1256:		}
        -: 1257:	}
   977810: 1258:	while(z-1>=0){
branch  0 taken 486904
branch  1 taken 2001
   486904: 1259:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
        -: 1260:		//discard all cards in play that have been drawn
   486904: 1261:		z = z - 1;
        -: 1262:	}
     2001: 1263:	return 0;
        -: 1264:}
        -: 1265:
function minePlay called 0 returned 0% blocks executed 0%
        -: 1266:int minePlay(int choice1, int choice2, struct gameState *state, int handPos) {
        -: 1267:	int i;
        -: 1268:	int j;
    #####: 1269:	int currentPlayer = whoseTurn(state);
        -: 1270:
    #####: 1271:	j = state->hand[currentPlayer][choice1]; //store card we will trash
    #####: 1272:	if(state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1273:		return -1;
        -: 1274:	}
        -: 1275:
    #####: 1276:	if(choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1277:		return -1;
        -: 1278:	}
        -: 1279:	
    #####: 1280:	if((getCost(state->hand[currentPlayer][choice1]) + 7) > getCost(choice2)) { //bug introduced:
branch  0 never executed
branch  1 never executed
        -: 1281:									//correct logic is + 3 not + 7
    #####: 1282:		return -1;
        -: 1283:	}
        -: 1284:
    #####: 1285:	gainCard(choice2, state, 2, currentPlayer);
        -: 1286:
        -: 1287:	//discard card from hand
    #####: 1288:	discardCard(handPos, currentPlayer, state, 0);
        -: 1289:
        -: 1290:	//discard trashed card
    #####: 1291:	for(i=0; i<state->handCount[currentPlayer];i++) {
branch  0 never executed
branch  1 never executed
    #####: 1292:		if(state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1293:			discardCard(i, currentPlayer, state, 0);
    #####: 1294:			break;
        -: 1295:		}
    #####: 1296:	}
        -: 1297:
    #####: 1298:	return 0;
        -: 1299:	
    #####: 1300:}
        -: 1301:
function remodelPlay called 0 returned 0% blocks executed 0%
        -: 1302:int remodelPlay(int choice1, int choice2, struct gameState *state, int handPos) {
        -: 1303:	int i;
        -: 1304:	int j;
    #####: 1305:	int currentPlayer = whoseTurn(state);
        -: 1306:	
        -: 1307:
    #####: 1308:	j = state->hand[currentPlayer][choice1]; //store card we will trash
    #####: 1309:	if((getCost(state->hand[currentPlayer][choice1])+2) > getCost(choice2)) {
branch  0 never executed
branch  1 never executed
    #####: 1310:		return -1;
        -: 1311:	}
    #####: 1312:	gainCard(choice2, state, 0, currentPlayer);
        -: 1313:
        -: 1314:	//discard card from hand
    #####: 1315:	discardCard(handPos, currentPlayer, state, 0);
        -: 1316:
        -: 1317:	//discard trashed card
    #####: 1318:	for(i=0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1319:		if(state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####: 1320:			discardCard(i, currentPlayer, state, 0);
    #####: 1321:			break;
        -: 1322:		}
    #####: 1323:	}
    #####: 1324:	return 0;
    #####: 1325:}
        -: 1326:
function smithyPlay called 2 returned 100% blocks executed 100%
        -: 1327:int smithyPlay(struct gameState *state, int handPos) {
        -: 1328:	int i;
        2: 1329:	int currentPlayer = whoseTurn(state);
        -: 1330:
        8: 1331:	for(i=0; i<1; i++) { //bug introduced: correct logic is i<3 not i<1
branch  0 taken 2
branch  1 taken 2
        2: 1332:		drawCard(currentPlayer, state);
        2: 1333:	}
        -: 1334:	//discard card from hand
        2: 1335:	discardCard(handPos, currentPlayer, state, 0);
        2: 1336:	return 0;
        -: 1337:}
        -: 1338:
function villagePlay called 2001 returned 100% blocks executed 100%
        -: 1339:int villagePlay(struct gameState *state, int handPos) {
     2001: 1340:	int currentPlayer = whoseTurn(state);
        -: 1341:	//+1 Card
     2001: 1342:	drawCard(currentPlayer, state);
        -: 1343:	
        -: 1344:	//+2 Actions
     2001: 1345:	state->numActions = state->numActions + 4; //bug introduced: correct logic is 2 not 4
        -: 1346:
        -: 1347:	//discard played card from hand
     2001: 1348:	discardCard(handPos, currentPlayer, state, 0);
     2001: 1349:	return 0;
        -: 1350:}
        -: 1351:
function discardCard called 4004 returned 100% blocks executed 90%
        -: 1352:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1353:{
        -: 1354:	
        -: 1355:  //if card is not trashed, added to Played pile 
     4004: 1356:  if (trashFlag < 1)
branch  0 taken 4004
branch  1 taken 0
        -: 1357:    {
        -: 1358:      //add card to played pile
     4004: 1359:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4004: 1360:      state->playedCardCount++;
     4004: 1361:    }
        -: 1362:	
        -: 1363:  //set played card to -1
     4004: 1364:  state->hand[currentPlayer][handPos] = -1;
        -: 1365:	
        -: 1366:  //remove card from player's hand
     4004: 1367:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 6
branch  1 taken 3998
        -: 1368:    {
        -: 1369:      //reduce number of cards in hand
        6: 1370:      state->handCount[currentPlayer]--;
        6: 1371:    }
     3998: 1372:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0
branch  1 taken 3998
        -: 1373:    {
        -: 1374:      //reduce number of cards in hand
    #####: 1375:      state->handCount[currentPlayer]--;
    #####: 1376:    }
        -: 1377:  else 	
        -: 1378:    {
        -: 1379:      //replace discarded card with last card in hand
     3998: 1380:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1381:      //set last card to -1
     3998: 1382:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1383:      //reduce number of cards in hand
     3998: 1384:      state->handCount[currentPlayer]--;
        -: 1385:    }
        -: 1386:	
     4004: 1387:  return 0;
        -: 1388:}
        -: 1389:
function gainCard called 1 returned 100% blocks executed 72%
        -: 1390:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1391:{
        -: 1392:  //Note: supplyPos is enum of choosen card
        -: 1393:	
        -: 1394:  //check if supply pile is empty (0) or card is not used in game (-1)
        1: 1395:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0
branch  1 taken 1
        -: 1396:    {
    #####: 1397:      return -1;
        -: 1398:    }
        -: 1399:	
        -: 1400:  //added card for [whoseTurn] current player:
        -: 1401:  // toFlag = 0 : add to discard
        -: 1402:  // toFlag = 1 : add to deck
        -: 1403:  // toFlag = 2 : add to hand
        -: 1404:
        1: 1405:  if (toFlag == 1)
branch  0 taken 0
branch  1 taken 1
        -: 1406:    {
    #####: 1407:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1408:      state->deckCount[player]++;
    #####: 1409:    }
        1: 1410:  else if (toFlag == 2)
branch  0 taken 0
branch  1 taken 1
        -: 1411:    {
    #####: 1412:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1413:      state->handCount[player]++;
    #####: 1414:    }
        -: 1415:  else
        -: 1416:    {
        1: 1417:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1418:      state->discardCount[player]++;
        -: 1419:    }
        -: 1420:	
        -: 1421:  //decrease number in supply pile
        1: 1422:  state->supplyCount[supplyPos]--;
        -: 1423:	 
        1: 1424:  return 0;
        1: 1425:}
        -: 1426:
function updateCoins called 6011 returned 100% blocks executed 92%
        -: 1427:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1428:{
        -: 1429:  int i;
        -: 1430:	
        -: 1431:  //reset coin count
     6011: 1432:  state->coins = 0;
        -: 1433:
        -: 1434:  //add coins for each Treasure card in player's hand
    72132: 1435:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 30055
branch  1 taken 6011
        -: 1436:    {
    30055: 1437:      if (state->hand[player][i] == copper)
branch  0 taken 23392
branch  1 taken 6663
        -: 1438:	{
    23392: 1439:	  state->coins += 1;
    23392: 1440:	}
     6663: 1441:      else if (state->hand[player][i] == silver)
branch  0 taken 0
branch  1 taken 6663
        -: 1442:	{
    #####: 1443:	  state->coins += 2;
    #####: 1444:	}
     6663: 1445:      else if (state->hand[player][i] == gold)
branch  0 taken 1
branch  1 taken 6662
        -: 1446:	{
        1: 1447:	  state->coins += 3;
        1: 1448:	}	
    30055: 1449:    }	
        -: 1450:
        -: 1451:  //add bonus
     6011: 1452:  state->coins += bonus;
        -: 1453:
     6011: 1454:  return 0;
        -: 1455:}
        -: 1456:
        -: 1457:
        -: 1458://end of dominion.c
        -: 1459:
